{"version":3,"file":"huggingFaceService-C7HqYE_P.js","sources":["../../src/services/huggingFaceService.js"],"sourcesContent":["/**\r\n * Hugging Face API Service\r\n * Provides functions to interact with Hugging Face models\r\n */\r\n\r\nimport api from './api';\r\n\r\n// Hugging Face Inference API endpoint\r\nconst HUGGING_FACE_API_URL = 'https://api-inference.huggingface.co/models/';\r\n\r\n// Get API key from environment variables\r\nconst HUGGING_FACE_API_KEY = import.meta.env.VITE_HUGGING_FACE_API_KEY || '';\r\n\r\n/**\r\n * Get a Hugging Face model interface\r\n * @param {string} modelId - The Hugging Face model ID\r\n * @returns {Promise<Object>} - A model interface object\r\n */\r\nexport const getHuggingFaceModel = async (modelId) => {\r\n  try {\r\n    if (!HUGGING_FACE_API_KEY) {\r\n      throw new Error('Hugging Face API key not found. Please add it to your .env file as VITE_HUGGING_FACE_API_KEY.');\r\n    }\r\n    \r\n    // Attempt an initial query to verify the model works\r\n    await queryModel(modelId, 'Hello, world!');\r\n    \r\n    return {\r\n      modelId,\r\n      \r\n      /**\r\n       * Query the model\r\n       * @param {string} input - The input text to query with\r\n       * @returns {Promise<Object|string>} - The model's response\r\n       */\r\n      query: async (input) => {\r\n        return await queryModel(modelId, input);\r\n      },\r\n      \r\n      /**\r\n       * Get model information\r\n       * @returns {Promise<Object>} - Model information\r\n       */\r\n      getInfo: async () => {\r\n        return {\r\n          id: modelId,\r\n          name: modelId.includes('/') ? modelId.split('/')[1] : modelId,\r\n          provider: 'huggingface',\r\n        };\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error initializing Hugging Face model ${modelId}:`, error);\r\n    throw new Error(`Failed to initialize model ${modelId}: ${error.message}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Query a Hugging Face model\r\n * @param {string} modelId - The Hugging Face model ID\r\n * @param {string} input - The input text\r\n * @returns {Promise<Object|string>} - The model's response\r\n */\r\nconst queryModel = async (modelId, input) => {\r\n  try {\r\n    const response = await fetch(`${HUGGING_FACE_API_URL}${modelId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${HUGGING_FACE_API_KEY}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ inputs: input }),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(`API request failed: ${response.status} ${response.statusText} - ${errorData.error || ''}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(`Error querying model ${modelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a model adapter for a specified Hugging Face model\r\n * \r\n * @param {Object} modelConfig - Configuration for the model\r\n * @returns {Object} Model adapter for interacting with the model\r\n */\r\nexport const getHuggingFaceModelAdapter = async (modelConfig) => {\r\n  // Use the user-provided modelId if available, otherwise determine based on model type\r\n  const modelId = modelConfig.modelId || getModelIdForType(modelConfig.modelType, modelConfig.modelCategory);\r\n  \r\n  try {\r\n    // Verify the model exists and is accessible\r\n    console.log(`Initializing Hugging Face model: ${modelId}`);\r\n    \r\n    // Make a test call to the model with a simple input\r\n    const testResponse = await fetch(`${HUGGING_FACE_API_URL}${modelId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${HUGGING_FACE_API_KEY}`\r\n      },\r\n      body: JSON.stringify({ inputs: \"Hello, testing model connectivity\" })\r\n    });\r\n    \r\n    if (!testResponse.ok) {\r\n      const errorData = await testResponse.json().catch(() => ({}));\r\n      throw new Error(`Failed to initialize model: ${testResponse.status} ${testResponse.statusText} - ${errorData.error || ''}`);\r\n    }\r\n    \r\n    // Create a model adapter that uses the Hugging Face API\r\n    return {\r\n      modelType: modelConfig.modelType,\r\n      modelId,\r\n      source: 'huggingface',\r\n      \r\n      // Method for generating predictions from the model\r\n      getPrediction: async (input) => {\r\n        try {\r\n          // Make a call to the Hugging Face Inference API\r\n          const response = await fetch(`${HUGGING_FACE_API_URL}${modelId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${HUGGING_FACE_API_KEY}`\r\n            },\r\n            body: JSON.stringify({ inputs: input })\r\n          });\r\n          \r\n          if (!response.ok) {\r\n            throw new Error(`Error from Hugging Face API: ${response.statusText}`);\r\n          }\r\n          \r\n          const result = await response.json();\r\n          \r\n          // Process and standardize the response format based on model type\r\n          return processHuggingFaceResponse(result, modelConfig.modelType);\r\n        } catch (error) {\r\n          console.error('Error calling Hugging Face API:', error);\r\n          throw error;\r\n        }\r\n      },\r\n\r\n      /**\r\n       * Get model information\r\n       * @returns {Object} - Information about the model\r\n       */\r\n      getModelInfo: () => {\r\n        return {\r\n          name: modelId,\r\n          type: modelConfig.modelType || 'huggingface',\r\n          category: modelConfig.modelCategory || 'text',\r\n          parameters: modelConfig.parameters || {}\r\n        };\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error(`Error initializing Hugging Face model ${modelId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Process and standardize response from Hugging Face API based on model type\r\n * \r\n * @param {Object} response - Raw response from Hugging Face API\r\n * @param {string} modelType - Type of model used\r\n * @returns {Object} Standardized prediction result\r\n */\r\nconst processHuggingFaceResponse = (response, modelType) => {\r\n  // Process the response based on model type\r\n  switch (modelType) {\r\n    case 'Text Classification':\r\n      return {\r\n        prediction: response,\r\n        confidence: response[0]?.score || 0,\r\n        classification: response[0]?.label || '',\r\n      };\r\n      \r\n    case 'Image Classification':\r\n      return {\r\n        prediction: response,\r\n        confidence: response[0]?.score || 0,\r\n        classification: response[0]?.label || '',\r\n      };\r\n      \r\n    case 'Text Generation':\r\n      return {\r\n        prediction: response[0]?.generated_text || response,\r\n        confidence: 0.9, // Text generation models typically don't provide confidence scores\r\n      };\r\n      \r\n    default:\r\n      // Default processing for other model types\r\n      return {\r\n        prediction: response,\r\n        confidence: Array.isArray(response) ? response[0]?.score || 0.5 : 0.5,\r\n      };\r\n  }\r\n};\r\n\r\n/**\r\n * Map model type and category to an appropriate Hugging Face model ID\r\n * \r\n * @param {string} modelType - Type of model\r\n * @param {string} category - Model category\r\n * @returns {string} Hugging Face model ID\r\n */\r\nconst getModelIdForType = (modelType, category) => {\r\n  // Map of model types to recommended Hugging Face models\r\n  const modelMap = {\r\n    // NLP Models\r\n    'Text Classification': 'distilbert-base-uncased-finetuned-sst-2-english',\r\n    'Token Classification': 'dbmdz/bert-large-cased-finetuned-conll03-english',\r\n    'Question Answering': 'distilbert-base-cased-distilled-squad',\r\n    'Zero-Shot Classification': 'facebook/bart-large-mnli',\r\n    'Translation': 'Helsinki-NLP/opus-mt-en-fr',\r\n    'Summarization': 'facebook/bart-large-cnn',\r\n    'Text Generation': 'gpt2',\r\n    \r\n    // Vision Models\r\n    'Image Classification': 'google/vit-base-patch16-224',\r\n    'Object Detection': 'facebook/detr-resnet-50',\r\n    'Image Segmentation': 'facebook/detr-resnet-50-panoptic',\r\n    \r\n    // Audio Models\r\n    'Audio Classification': 'superb/hubert-large-superb-er',\r\n    'Automatic Speech Recognition': 'facebook/wav2vec2-base-960h',\r\n    \r\n    // Default models by category\r\n    'DEFAULT_NLP': 'distilbert-base-uncased',\r\n    'DEFAULT_Vision': 'google/vit-base-patch16-224',\r\n    'DEFAULT_Audio': 'facebook/wav2vec2-base-960h',\r\n    'DEFAULT_Multimodal': 'openai/clip-vit-base-patch32',\r\n    'DEFAULT_Tabular': 'distilbert-base-uncased' // Fallback for tabular models\r\n  };\r\n  \r\n  // Return the specific model for this type, or the default for the category\r\n  return modelMap[modelType] || modelMap[`DEFAULT_${category}`] || 'distilbert-base-uncased';\r\n};\r\n\r\nexport default {\r\n  getHuggingFaceModelAdapter\r\n}; "],"names":["HUGGING_FACE_API_URL","HUGGING_FACE_API_KEY","getHuggingFaceModel","modelId","queryModel","input","error","response","errorData","getHuggingFaceModelAdapter","modelConfig","getModelIdForType","testResponse","result","processHuggingFaceResponse","modelType","_a","_b","_c","_d","_e","_f","category","modelMap","huggingFaceService"],"mappings":"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"}