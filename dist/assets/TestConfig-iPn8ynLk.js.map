{"version":3,"file":"TestConfig-iPn8ynLk.js","sources":["../../src/pages/TestConfig.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Tabs,\r\n  Tab,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Checkbox,\r\n  Button,\r\n  Divider,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  TextField,\r\n  Alert,\r\n  Chip,\r\n  Slider,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Switch,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Container,\r\n} from '@mui/material';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport { useAppContext } from '../context/AppContext';\r\nimport { MOCK_TESTS } from '../constants/testCategories';\r\nimport SeverityChip from '../components/common/SeverityChip';\r\n\r\nconst TestConfigPage = () => {\r\n  const navigate = useNavigate();\r\n  const { \r\n    selectedTests, \r\n    saveTestConfiguration, \r\n    testParameters, \r\n    updateTestParameter, \r\n    modelType,\r\n    modelCategory\r\n  } = useAppContext();\r\n  \r\n  const [currentTab, setCurrentTab] = useState(0);\r\n  const [localSelectedTests, setLocalSelectedTests] = useState([]);\r\n  const [selectAllInCategory, setSelectAllInCategory] = useState({});\r\n  const [configDialogOpen, setConfigDialogOpen] = useState(false);\r\n  const [currentTestForConfig, setCurrentTestForConfig] = useState(null);\r\n  const [saveSuccess, setSaveSuccess] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  \r\n  // Get categories based on available tests\r\n  const categories = Object.keys(MOCK_TESTS);\r\n  \r\n  // Initialize local state from context\r\n  useEffect(() => {\r\n    setLocalSelectedTests(selectedTests || []);\r\n  }, [selectedTests]);\r\n  \r\n  // Update select all state based on selections\r\n  useEffect(() => {\r\n    const newSelectAllState = {};\r\n    categories.forEach(category => {\r\n      const testsInCategory = MOCK_TESTS[category].map(test => test.id);\r\n      const selectedInCategory = testsInCategory.filter(id => localSelectedTests.includes(id));\r\n      newSelectAllState[category] = selectedInCategory.length === testsInCategory.length;\r\n    });\r\n    setSelectAllInCategory(newSelectAllState);\r\n  }, [localSelectedTests, categories]);\r\n  \r\n  const handleTabChange = (event, newValue) => {\r\n    setCurrentTab(newValue);\r\n  };\r\n  \r\n  const handleTestToggle = (testId) => {\r\n    setLocalSelectedTests(prev => {\r\n      if (prev.includes(testId)) {\r\n        return prev.filter(id => id !== testId);\r\n      } else {\r\n        return [...prev, testId];\r\n      }\r\n    });\r\n  };\r\n  \r\n  const handleSelectAllForCategory = (category) => {\r\n    const testsInCategory = MOCK_TESTS[category].map(test => test.id);\r\n    \r\n    setLocalSelectedTests(prev => {\r\n      if (selectAllInCategory[category]) {\r\n        // Deselect all in this category\r\n        return prev.filter(id => !testsInCategory.includes(id));\r\n      } else {\r\n        // Select all in this category\r\n        const currentlySelected = prev.filter(id => !testsInCategory.includes(id));\r\n        return [...currentlySelected, ...testsInCategory];\r\n      }\r\n    });\r\n  };\r\n  \r\n  const handleConfigureTest = (test) => {\r\n    setCurrentTestForConfig(test);\r\n    setConfigDialogOpen(true);\r\n  };\r\n  \r\n  const handleCloseConfigDialog = () => {\r\n    setConfigDialogOpen(false);\r\n    setCurrentTestForConfig(null);\r\n  };\r\n  \r\n  const handleSaveTestParameters = () => {\r\n    // Already being saved in real-time through updateTestParameter\r\n    setConfigDialogOpen(false);\r\n    setCurrentTestForConfig(null);\r\n  };\r\n  \r\n  const handleSaveConfiguration = () => {\r\n    setLoading(true);\r\n    \r\n    // Simulate saving with a delay\r\n    setTimeout(() => {\r\n      saveTestConfiguration(localSelectedTests);\r\n      setSaveSuccess(true);\r\n      setSnackbarOpen(true);\r\n      setLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  \r\n  const handleProceedToRunTests = () => {\r\n    navigate('/run-tests');\r\n  };\r\n  \r\n  const renderConfigurationDialog = () => {\r\n    if (!currentTestForConfig) return null;\r\n    \r\n    // Get current parameters for this test\r\n    const currentParams = testParameters[currentTestForConfig.id] || {};\r\n    \r\n    return (\r\n      <Dialog \r\n        open={configDialogOpen} \r\n        onClose={handleCloseConfigDialog}\r\n        fullWidth\r\n        maxWidth=\"sm\"\r\n      >\r\n        <DialogTitle>\r\n          Configure Test: {currentTestForConfig.name}\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\r\n            {currentTestForConfig.description}\r\n          </Typography>\r\n          \r\n          <Box sx={{ mt: 3 }}>\r\n            {/* Common test parameters */}\r\n            {currentTestForConfig.id.includes('tech_safety') && (\r\n              <>\r\n                {/* Input Validation Test */}\r\n                {currentTestForConfig.id === 'tech_safety_1' && (\r\n                  <Box>\r\n                    <Typography id=\"success-rate-slider\" gutterBottom>\r\n                      Minimum Success Rate: {(currentParams.min_success_rate || 0.8) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"success-rate-slider\"\r\n                      value={currentParams.min_success_rate || 0.8}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { min_success_rate: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                  </Box>\r\n                )}\r\n                \r\n                {/* Consistency Test */}\r\n                {currentTestForConfig.id === 'tech_safety_2' && (\r\n                  <>\r\n                    <Typography id=\"stability-slider\" gutterBottom>\r\n                      Stability Threshold: {(currentParams.stability_threshold || 0.8) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"stability-slider\"\r\n                      value={currentParams.stability_threshold || 0.8}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { stability_threshold: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                    \r\n                    <Typography id=\"consistency-slider\" gutterBottom sx={{ mt: 3 }}>\r\n                      Consistency Threshold: {(currentParams.consistency_threshold || 0.7) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"consistency-slider\"\r\n                      value={currentParams.consistency_threshold || 0.7}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { consistency_threshold: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                  </>\r\n                )}\r\n                \r\n                {/* Error Recovery Test */}\r\n                {currentTestForConfig.id === 'tech_safety_3' && (\r\n                  <Box>\r\n                    <Typography id=\"recovery-slider\" gutterBottom>\r\n                      Minimum Recovery Score: {(currentParams.min_recovery_score || 0.7) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"recovery-slider\"\r\n                      value={currentParams.min_recovery_score || 0.7}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { min_recovery_score: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                  </Box>\r\n                )}\r\n                \r\n                {/* Load Test */}\r\n                {currentTestForConfig.id === 'tech_safety_4' && (\r\n                  <Box>\r\n                    <Typography id=\"performance-slider\" gutterBottom>\r\n                      Minimum Performance Score: {(currentParams.min_performance_score || 0.7) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"performance-slider\"\r\n                      value={currentParams.min_performance_score || 0.7}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { min_performance_score: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                  </Box>\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {/* Fairness tests */}\r\n            {currentTestForConfig.id.includes('fairness') && (\r\n              <>\r\n                {/* Demographic Test */}\r\n                {currentTestForConfig.id === 'fairness_1' && (\r\n                  <Box>\r\n                    <Typography id=\"min-accuracy-slider\" gutterBottom>\r\n                      Minimum Group Accuracy: {(currentParams.min_accuracy || 0.7) * 100}%\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"min-accuracy-slider\"\r\n                      value={currentParams.min_accuracy || 0.7}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { min_accuracy: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                      valueLabelFormat={value => `${value * 100}%`}\r\n                    />\r\n                  </Box>\r\n                )}\r\n                \r\n                {/* Disparate Impact Test */}\r\n                {currentTestForConfig.id === 'fairness_2' && (\r\n                  <Box>\r\n                    <Typography id=\"min-ratio-slider\" gutterBottom>\r\n                      Minimum Fairness Ratio: {currentParams.min_ratio || 0.8}\r\n                    </Typography>\r\n                    <Slider\r\n                      aria-labelledby=\"min-ratio-slider\"\r\n                      value={currentParams.min_ratio || 0.8}\r\n                      onChange={(e, value) => updateTestParameter(currentTestForConfig.id, { min_ratio: value })}\r\n                      step={0.05}\r\n                      marks\r\n                      min={0.4}\r\n                      max={1}\r\n                      valueLabelDisplay=\"auto\"\r\n                    />\r\n                  </Box>\r\n                )}\r\n              </>\r\n            )}\r\n            \r\n            {/* General parameters for all tests */}\r\n            <FormGroup sx={{ mt: 3 }}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch \r\n                    checked={currentParams.verbose || false}\r\n                    onChange={(e) => updateTestParameter(currentTestForConfig.id, { verbose: e.target.checked })}\r\n                  />\r\n                }\r\n                label=\"Verbose Logging\"\r\n              />\r\n              \r\n              <FormControlLabel\r\n                control={\r\n                  <Switch \r\n                    checked={currentParams.stop_on_failure || false}\r\n                    onChange={(e) => updateTestParameter(currentTestForConfig.id, { stop_on_failure: e.target.checked })}\r\n                  />\r\n                }\r\n                label=\"Stop on Failure\"\r\n              />\r\n            </FormGroup>\r\n            \r\n            <TextField\r\n              margin=\"normal\"\r\n              fullWidth\r\n              multiline\r\n              rows={3}\r\n              label=\"Additional Notes\"\r\n              value={currentParams.notes || ''}\r\n              onChange={(e) => updateTestParameter(currentTestForConfig.id, { notes: e.target.value })}\r\n            />\r\n          </Box>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleCloseConfigDialog}>Cancel</Button>\r\n          <Button onClick={handleSaveTestParameters} variant=\"contained\" color=\"primary\">\r\n            Save Parameters\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n  \r\n  const renderTestList = (category) => {\r\n    const testsInCategory = MOCK_TESTS[category] || [];\r\n    \r\n    // Filter tests for NLP category if the model isn't an NLP or multimodal model\r\n    const filteredTests = category === 'NLP-Specific' && \r\n                         !['NLP', 'Multimodal'].includes(modelCategory) \r\n                         ? [] \r\n                         : testsInCategory;\r\n    \r\n    if (filteredTests.length === 0) {\r\n      return (\r\n        <Paper variant=\"outlined\" sx={{ mt: 2, p: 3, textAlign: 'center' }}>\r\n          <Typography variant=\"body1\" color=\"textSecondary\">\r\n            No applicable tests for this model type in this category.\r\n          </Typography>\r\n        </Paper>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <Paper variant=\"outlined\" sx={{ mt: 2 }}>\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              checked={selectAllInCategory[category] || false}\r\n              onChange={() => handleSelectAllForCategory(category)}\r\n              inputProps={{ 'aria-label': `Select all ${category} tests` }}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText \r\n            primary={<Typography variant=\"subtitle1\">Select All</Typography>}\r\n          />\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            {filteredTests.length} tests available\r\n          </Typography>\r\n        </ListItem>\r\n        \r\n        <Divider />\r\n        \r\n        <List>\r\n          {filteredTests.map((test) => {\r\n            const isSelected = localSelectedTests.includes(test.id);\r\n            const hasParameters = testParameters[test.id];\r\n            \r\n            return (\r\n              <ListItem \r\n                key={test.id}\r\n                secondaryAction={\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onClick={() => handleConfigureTest(test)}\r\n                    startIcon={<SettingsIcon />}\r\n                  >\r\n                    Configure\r\n                  </Button>\r\n                }\r\n                disablePadding\r\n              >\r\n                <ListItemButton \r\n                  onClick={() => handleTestToggle(test.id)}\r\n                  dense\r\n                  sx={{ pr: 7 }}\r\n                >\r\n                  <ListItemIcon>\r\n                    <Checkbox\r\n                      edge=\"start\"\r\n                      checked={isSelected}\r\n                      inputProps={{ 'aria-label': `Select ${test.name}` }}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText \r\n                    primary={\r\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                        {test.name}\r\n                        {hasParameters && (\r\n                          <Chip \r\n                            label=\"Configured\" \r\n                            size=\"small\" \r\n                            color=\"primary\" \r\n                            variant=\"outlined\"\r\n                            sx={{ ml: 1 }}\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                    }\r\n                    secondary={test.description} \r\n                  />\r\n                  <SeverityChip severity={test.severity} sx={{ ml: 1 }} />\r\n                </ListItemButton>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  };\r\n  \r\n  const recommendedCategories = () => {\r\n    // Different recommendations based on model type and risk level\r\n    if (modelCategory === 'NLP') {\r\n      return ['Technical Safety', 'NLP-Specific', 'Fairness & Bias'];\r\n    } else if (modelCategory === 'Vision') {\r\n      return ['Technical Safety', 'Fairness & Bias', 'Privacy Protection'];\r\n    } else {\r\n      return ['Technical Safety', 'Regulatory Compliance'];\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Test Configuration\r\n      </Typography>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Recommended Tests\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" paragraph>\r\n          Based on your model type ({modelType}) and configuration, we recommend the following test categories:\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n          {recommendedCategories().map(category => (\r\n            <Chip \r\n              key={category}\r\n              label={category}\r\n              onClick={() => {\r\n                const index = categories.indexOf(category);\r\n                if (index !== -1) {\r\n                  setCurrentTab(index);\r\n                }\r\n              }}\r\n              sx={{ cursor: 'pointer' }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      </Paper>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\r\n          <Tabs \r\n            value={currentTab} \r\n            onChange={handleTabChange}\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n          >\r\n            {categories.map((category, index) => (\r\n              <Tab \r\n                key={category} \r\n                label={category} \r\n                id={`test-tab-${index}`}\r\n                aria-controls={`test-tabpanel-${index}`}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n        </Box>\r\n        \r\n        {categories.map((category, index) => (\r\n          <Box\r\n            key={category}\r\n            role=\"tabpanel\"\r\n            hidden={currentTab !== index}\r\n            id={`test-tabpanel-${index}`}\r\n            aria-labelledby={`test-tab-${index}`}\r\n          >\r\n            {currentTab === index && renderTestList(category)}\r\n          </Box>\r\n        ))}\r\n      </Paper>\r\n      \r\n      <Box sx={{ mt: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        <Typography>\r\n          <strong>{localSelectedTests.length}</strong> tests selected\r\n        </Typography>\r\n        \r\n        <Box sx={{ display: 'flex', gap: 2 }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={() => setLocalSelectedTests([])}\r\n            disabled={localSelectedTests.length === 0 || loading}\r\n          >\r\n            Clear Selection\r\n          </Button>\r\n          \r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={handleSaveConfiguration}\r\n            disabled={localSelectedTests.length === 0 || loading}\r\n            startIcon={loading ? <CircularProgress size={20} /> : <CheckCircleOutlineIcon />}\r\n          >\r\n            Save Configuration\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {saveSuccess && (\r\n        <Box sx={{ mt: 3 }}>\r\n          <Alert severity=\"success\" sx={{ mb: 2 }}>\r\n            Test configuration saved successfully!\r\n          </Alert>\r\n          \r\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<PlayArrowIcon />}\r\n              onClick={handleProceedToRunTests}\r\n            >\r\n              Proceed to Run Tests\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n      \r\n      {renderConfigurationDialog()}\r\n      \r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        message=\"Test configuration saved successfully!\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TestConfigPage;"],"names":["TestConfigPage","navigate","useNavigate","selectedTests","saveTestConfiguration","testParameters","updateTestParameter","modelType","modelCategory","useAppContext","currentTab","setCurrentTab","useState","localSelectedTests","setLocalSelectedTests","selectAllInCategory","setSelectAllInCategory","configDialogOpen","setConfigDialogOpen","currentTestForConfig","setCurrentTestForConfig","saveSuccess","setSaveSuccess","loading","setLoading","snackbarOpen","setSnackbarOpen","categories","MOCK_TESTS","useEffect","newSelectAllState","category","testsInCategory","test","selectedInCategory","id","handleTabChange","event","newValue","handleTestToggle","testId","prev","handleSelectAllForCategory","handleConfigureTest","handleCloseConfigDialog","handleSaveTestParameters","handleSaveConfiguration","handleCloseSnackbar","handleProceedToRunTests","renderConfigurationDialog","currentParams","jsxs","Dialog","DialogTitle","DialogContent","jsx","Typography","Box","Fragment","Slider","e","value","FormGroup","FormControlLabel","Switch","TextField","DialogActions","Button","renderTestList","filteredTests","Paper","ListItem","ListItemIcon","Checkbox","ListItemText","Divider","List","isSelected","hasParameters","SettingsIcon","ListItemButton","Chip","SeverityChip","recommendedCategories","Container","index","Tabs","Tab","CircularProgress","CheckCircleOutlineIcon","Alert","PlayArrowIcon","Snackbar"],"mappings":"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"}