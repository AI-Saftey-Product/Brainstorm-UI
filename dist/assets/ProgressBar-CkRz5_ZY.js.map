{"version":3,"file":"ProgressBar-CkRz5_ZY.js","sources":["../../src/components/common/StatusChip.jsx","../../src/components/common/CategoryChip.jsx","../../src/components/common/ComplianceScoreGauge.jsx","../../src/components/common/ProgressBar.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Chip } from '@mui/material';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport InfoIcon from '@mui/icons-material/Info';\r\nimport HelpIcon from '@mui/icons-material/Help';\r\n\r\n/**\r\n * A chip component for displaying status information with appropriate icons and colors\r\n * \r\n * @param {Object} props - Component properties\r\n * @param {string} props.status - Status value ('passed', 'failed', 'warning', 'info', or custom)\r\n * @param {string} props.label - Optional custom label (defaults to capitalized status)\r\n * @param {string} props.size - Chip size ('small' or 'medium')\r\n * @param {Object} props.sx - Additional styles\r\n * @returns {JSX.Element} Status chip component\r\n */\r\nconst StatusChip = ({ status, label, size = 'small', sx = {}, ...props }) => {\r\n  let icon = <HelpIcon />;\r\n  let color = 'default';\r\n  let chipLabel = label || (status ? status.charAt(0).toUpperCase() + status.slice(1) : 'Unknown');\r\n  \r\n  switch (status?.toLowerCase()) {\r\n    case 'passed':\r\n    case 'pass':\r\n    case 'success':\r\n      icon = <CheckCircleIcon />;\r\n      color = 'success';\r\n      break;\r\n      \r\n    case 'failed':\r\n    case 'fail':\r\n    case 'error':\r\n      icon = <ErrorIcon />;\r\n      color = 'error';\r\n      break;\r\n      \r\n    case 'warning':\r\n    case 'warn':\r\n      icon = <InfoIcon />;\r\n      color = 'warning';\r\n      break;\r\n      \r\n    case 'info':\r\n    case 'information':\r\n      icon = <InfoIcon />;\r\n      color = 'info';\r\n      break;\r\n      \r\n    default:\r\n      break;\r\n  }\r\n  \r\n  return (\r\n    <Chip\r\n      icon={icon}\r\n      size={size}\r\n      label={chipLabel}\r\n      color={color}\r\n      sx={{\r\n        fontWeight: 500,\r\n        ...sx\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StatusChip;","import React from 'react';\r\nimport { Chip } from '@mui/material';\r\nimport { TEST_CATEGORIES } from '../../constants/testCategories';\r\n\r\n/**\r\n * A chip component for displaying test categories with appropriate colors\r\n * \r\n * @param {Object} props - Component properties\r\n * @param {string} props.category - Category name\r\n * @param {string} props.size - Chip size ('small' or 'medium')\r\n * @param {Object} props.sx - Additional styles\r\n * @returns {JSX.Element} Category chip component\r\n */\r\nconst CategoryChip = ({ category, size = 'small', sx = {}, ...props }) => {\r\n  const bgcolor = TEST_CATEGORIES[category] || '#757575';\r\n  \r\n  return (\r\n    <Chip\r\n      size={size}\r\n      label={category}\r\n      sx={{ \r\n        bgcolor, \r\n        color: 'white',\r\n        fontWeight: 500,\r\n        ...sx \r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CategoryChip;","import React from 'react';\r\nimport { Box, Typography } from '@mui/material';\r\n\r\n/**\r\n * A circular gauge component for displaying compliance scores\r\n * \r\n * @param {Object} props - Component properties\r\n * @param {number} props.score - Score value (0-100)\r\n * @param {number} props.size - Size of the gauge in pixels (default: 100)\r\n * @param {string} props.label - Optional label to display below the gauge\r\n * @param {boolean} props.showPercent - Whether to show % symbol (default: true)\r\n * @param {Object} props.sx - Additional sx styles\r\n * @returns {JSX.Element} Gauge component\r\n */\r\nconst ComplianceScoreGauge = ({ score, size = 100, label, showPercent = true, sx = {}, ...props }) => {\r\n  const getScoreColor = () => {\r\n    if (score >= 80) return '#4caf50'; // green\r\n    if (score >= 50) return '#ff9800'; // orange\r\n    return '#f44336'; // red\r\n  };\r\n  \r\n  const fontSize = Math.round(size * 0.32);\r\n  \r\n  return (\r\n    <Box sx={{ textAlign: 'center', ...sx }}>\r\n      <Box \r\n        {...props}\r\n        sx={{ \r\n          width: size, \r\n          height: size, \r\n          borderRadius: '50%', \r\n          bgcolor: getScoreColor(), \r\n          color: 'white', \r\n          display: 'flex', \r\n          alignItems: 'center', \r\n          justifyContent: 'center', \r\n          fontWeight: 'bold',\r\n          fontSize: fontSize,\r\n          boxShadow: '0 4px 8px rgba(0,0,0,0.12)',\r\n          mx: 'auto',\r\n          mb: label ? 1 : 0,\r\n          position: 'relative',\r\n          '&::after': {\r\n            content: '\"\"',\r\n            position: 'absolute',\r\n            width: '85%',\r\n            height: '85%',\r\n            borderRadius: '50%',\r\n            border: '2px solid rgba(255,255,255,0.3)',\r\n            boxSizing: 'border-box'\r\n          }\r\n        }}\r\n      >\r\n        {Math.round(score)}{showPercent && '%'}\r\n      </Box>\r\n      {label && (\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {label}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ComplianceScoreGauge;","import React from 'react';\r\nimport { Box } from '@mui/material';\r\n\r\n/**\r\n * A simple horizontal progress bar component\r\n * \r\n * @param {Object} props - Component properties\r\n * @param {number} props.value - Progress value (0-100)\r\n * @param {number} props.height - Height of the bar in pixels (default: 8)\r\n * @param {string} props.color - Optional color override (default is based on value)\r\n * @param {boolean} props.animated - Whether to show animation (default: false)\r\n * @param {Object} props.sx - Additional styles\r\n * @returns {JSX.Element} Progress bar component\r\n */\r\nconst ProgressBar = ({ value, height = 8, color, animated = false, sx = {}, ...props }) => {\r\n  const getProgressColor = () => {\r\n    if (color) return color;\r\n    if (value >= 80) return '#4caf50'; // green\r\n    if (value >= 50) return '#ff9800'; // orange\r\n    return '#f44336'; // red\r\n  };\r\n  \r\n  return (\r\n    <Box \r\n      {...props}\r\n      sx={{ \r\n        width: '100%', \r\n        height: height, \r\n        borderRadius: height / 2, \r\n        bgcolor: 'rgba(0,0,0,0.1)',\r\n        overflow: 'hidden',\r\n        ...sx\r\n      }}\r\n    >\r\n      <Box \r\n        sx={{\r\n          width: `${value}%`,\r\n          height: '100%',\r\n          bgcolor: getProgressColor(),\r\n          transition: animated ? 'width 0.5s ease-in-out' : 'none',\r\n          borderRadius: height / 2,\r\n          ...(animated && {\r\n            animation: 'pulse 1.5s infinite',\r\n            '@keyframes pulse': {\r\n              '0%': {\r\n                opacity: 0.8,\r\n              },\r\n              '50%': {\r\n                opacity: 1,\r\n              },\r\n              '100%': {\r\n                opacity: 0.8,\r\n              },\r\n            },\r\n          }),\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;"],"names":["StatusChip","status","label","size","sx","props","icon","HelpIcon","color","chipLabel","CheckCircleIcon","ErrorIcon","InfoIcon","jsx","Chip","CategoryChip","category","bgcolor","TEST_CATEGORIES","ComplianceScoreGauge","score","showPercent","getScoreColor","fontSize","jsxs","Box","Typography","ProgressBar","value","height","animated","getProgressColor"],"mappings":"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"}