{"version":3,"file":"RunTests-CHY7404w.js","sources":["../../src/services/api.js","../../src/services/testsService.js","../../src/pages/RunTests.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Use environment variable for API URL\r\nconst API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor for auth\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    const customError = {\r\n      status: error.response?.status || 500,\r\n      message: error.response?.data?.message || 'Something went wrong',\r\n      data: error.response?.data || {},\r\n    };\r\n    \r\n    // Log errors in development\r\n    if (import.meta.env.DEV) {\r\n      console.error('API Error:', customError);\r\n    }\r\n    \r\n    return Promise.reject(customError);\r\n  }\r\n);\r\n\r\nexport default api;","import api from './api';\r\nimport { MOCK_TESTS } from '../constants/testCategories';\r\n\r\n// In a real application, these would be API calls\r\n// For now, we'll use the mock data\r\n\r\n/**\r\n * Get all available tests\r\n * @returns {Promise<Array>} List of tests\r\n */\r\nexport const getAllTests = async () => {\r\n  try {\r\n    // In a real app: return await api.get('/tests');\r\n    const tests = Object.values(MOCK_TESTS).flat();\r\n    return Promise.resolve(tests);\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Get tests filtered by category\r\n * @param {string} category Category name\r\n * @returns {Promise<Array>} List of tests in the category\r\n */\r\nexport const getTestsByCategory = async (category) => {\r\n  try {\r\n    // In a real app: return await api.get(`/tests/category/${category}`);\r\n    const tests = MOCK_TESTS[category] || [];\r\n    return Promise.resolve(tests);\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Run tests with given configuration\r\n * @param {Array} testIds List of test IDs to run\r\n * @param {Object} modelAdapter Model adapter object\r\n * @param {Object} testParameters Test parameters\r\n * @returns {Promise<Object>} Test results\r\n */\r\nexport const runTests = async (testIds, modelAdapter, testParameters = {}) => {\r\n  try {\r\n    // For mock implementation, simulate API call with timeout\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Convert flat list to categories-based structure\r\n    const allTests = Object.values(MOCK_TESTS).flat();\r\n    \r\n    // Find selected tests\r\n    const testsToRun = allTests.filter(test => testIds.includes(test.id));\r\n    \r\n    // Generate mock results\r\n    const results = {};\r\n    const complianceScores = {};\r\n    \r\n    for (const test of testsToRun) {\r\n      // Add delay for realism\r\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 500 + 200));\r\n      \r\n      // Generate result (more likely to pass than fail)\r\n      const pass = Math.random() > 0.3;\r\n      const score = pass ? \r\n                Math.random() * 0.3 + 0.7 : // 0.7 - 1.0 for passed tests\r\n                Math.random() * 0.5 + 0.2;  // 0.2 - 0.7 for failed tests\r\n      \r\n      // Mock recommendations\r\n      const recommendations = pass ? \r\n        [] : \r\n        [\"Improve model training with more diverse data.\", \r\n         \"Consider fine-tuning the model parameters.\", \r\n         \"Add more test cases to validation set.\"];\r\n      \r\n      // Store result\r\n      results[test.id] = {\r\n        test,\r\n        result: {\r\n          pass,\r\n          score,\r\n          message: `Test ${pass ? 'passed' : 'failed'} with score ${(score * 100).toFixed(1)}%`,\r\n          metrics: {\r\n            score,\r\n            evaluated_inputs: Math.floor(Math.random() * 100) + 50,\r\n            processing_time: Math.random() * 5 + 0.5\r\n          },\r\n          details: { \r\n            tested_with: testParameters[test.id] || {},\r\n            timestamp: new Date().toISOString()\r\n          },\r\n          recommendations,\r\n          timestamp: new Date().toISOString()\r\n        }\r\n      };\r\n      \r\n      // Update category scores\r\n      if (!complianceScores[test.category]) {\r\n        complianceScores[test.category] = { passed: 0, total: 0 };\r\n      }\r\n      \r\n      complianceScores[test.category].total += 1;\r\n      if (pass) {\r\n        complianceScores[test.category].passed += 1;\r\n      }\r\n    }\r\n    \r\n    return Promise.resolve({ results, complianceScores });\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n};","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Divider,\r\n  Chip,\r\n  Alert,\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Switch,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Collapse,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport BarChartIcon from '@mui/icons-material/BarChart';\r\nimport RestartAltIcon from '@mui/icons-material/RestartAlt';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useAppContext } from '../context/AppContext';\r\nimport { TEST_CATEGORIES } from '../constants/testCategories';\r\nimport StatusChip from '../components/common/StatusChip';\r\nimport SeverityChip from '../components/common/SeverityChip';\r\nimport CategoryChip from '../components/common/CategoryChip.jsx';\r\nimport ComplianceScoreGauge from '../components/common/ComplianceScoreGauge';\r\nimport ProgressBar from '../components/common/ProgressBar';\r\nimport { runTests } from '../services/testsService';\r\n\r\nconst RunTestsPage = () => {\r\n  const navigate = useNavigate();\r\n  const { \r\n    selectedTests, \r\n    testParameters, \r\n    modelAdapter,\r\n    modelType,\r\n    saveTestResults\r\n  } = useAppContext();\r\n  \r\n  const [runningTests, setRunningTests] = useState(false);\r\n  const [testProgress, setTestProgress] = useState(0);\r\n  const [currentTestName, setCurrentTestName] = useState('');\r\n  const [testResults, setTestResults] = useState({});\r\n  const [complianceScores, setComplianceScores] = useState({});\r\n  const [totalPassed, setTotalPassed] = useState(0);\r\n  const [totalFailed, setTotalFailed] = useState(0);\r\n  const [overallScore, setOverallScore] = useState(0);\r\n  const [testComplete, setTestComplete] = useState(false);\r\n  const [expandedRows, setExpandedRows] = useState({});\r\n  const [verbose, setVerbose] = useState(false);\r\n  const [logs, setLogs] = useState([]);\r\n  \r\n  const logContainerRef = useRef(null);\r\n  \r\n  // Group tests by category\r\n  const groupTestsByCategory = () => {\r\n    const grouped = {};\r\n    \r\n    // Using data from MOCK_TESTS to get more info about the tests\r\n    Object.entries(TEST_CATEGORIES).forEach(([category]) => {\r\n      const testsInCategory = selectedTests.filter(testId => {\r\n        const allTests = Object.values(MOCK_TESTS).flat();\r\n        const test = allTests.find(t => t.id === testId);\r\n        return test && test.category === category;\r\n      });\r\n      \r\n      if (testsInCategory.length > 0) {\r\n        grouped[category] = testsInCategory.length;\r\n      }\r\n    });\r\n    \r\n    return grouped;\r\n  };\r\n  \r\n  // Auto-scroll logs\r\n  useEffect(() => {\r\n    if (logContainerRef.current && verbose) {\r\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\r\n    }\r\n  }, [logs, verbose]);\r\n  \r\n  const addLog = (message) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\r\n  };\r\n  \r\n  const handleRunTests = async () => {\r\n    if (!selectedTests.length) {\r\n      return;\r\n    }\r\n    \r\n    setRunningTests(true);\r\n    setTestProgress(0);\r\n    setCurrentTestName('');\r\n    setTestResults({});\r\n    setComplianceScores({});\r\n    setTotalPassed(0);\r\n    setTotalFailed(0);\r\n    setTestComplete(false);\r\n    setLogs([]);\r\n    \r\n    // Reset expanded rows\r\n    setExpandedRows({});\r\n    \r\n    try {\r\n      addLog(`Starting test run for ${selectedTests.length} tests...`);\r\n      \r\n      // Use the service to run tests\r\n      const { results, complianceScores: scores } = await runTests(\r\n        selectedTests, \r\n        modelAdapter, \r\n        testParameters\r\n      );\r\n      \r\n      // Save results to state\r\n      setTestResults(results);\r\n      setComplianceScores(scores);\r\n      \r\n      // Calculate statistics\r\n      const passed = Object.values(results).filter(item => item.result.pass).length;\r\n      const failed = selectedTests.length - passed;\r\n      \r\n      setTotalPassed(passed);\r\n      setTotalFailed(failed);\r\n      \r\n      // Calculate overall score\r\n      const totalScore = Object.values(scores).reduce((sum, category) => sum + category.passed, 0);\r\n      const totalTests = Object.values(scores).reduce((sum, category) => sum + category.total, 0);\r\n      const overall = totalTests > 0 ? (totalScore / totalTests) * 100 : 0;\r\n      \r\n      setOverallScore(overall);\r\n      \r\n      // Save results to context\r\n      saveTestResults(results, scores);\r\n      \r\n      setCurrentTestName('');\r\n      setRunningTests(false);\r\n      setTestComplete(true);\r\n      setTestProgress(100);\r\n      \r\n      addLog(`Test run completed successfully. ${passed} passed, ${failed} failed.`);\r\n    } catch (error) {\r\n      console.error('Error running tests:', error);\r\n      addLog(`Error running tests: ${error.message}`);\r\n      setRunningTests(false);\r\n    }\r\n  };\r\n  \r\n  const toggleRowExpand = (testId) => {\r\n    setExpandedRows(prev => ({\r\n      ...prev,\r\n      [testId]: !prev[testId]\r\n    }));\r\n  };\r\n  \r\n  const handleViewResults = () => {\r\n    navigate('/results');\r\n  };\r\n  \r\n  const formatMetricValue = (value) => {\r\n    if (typeof value === 'number') {\r\n      return value.toFixed(2);\r\n    }\r\n    return value;\r\n  };\r\n  \r\n  const TestResultRow = ({ item }) => {\r\n    return (\r\n      <React.Fragment>\r\n        <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n          <TableCell>\r\n            <IconButton\r\n              aria-label=\"expand row\"\r\n              size=\"small\"\r\n              onClick={() => toggleRowExpand(item.test.id)}\r\n            >\r\n              {expandedRows[item.test.id] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell component=\"th\" scope=\"row\">\r\n            {item.test.name}\r\n          </TableCell>\r\n          <TableCell>\r\n            <CategoryChip category={item.test.category} />\r\n          </TableCell>\r\n          <TableCell>\r\n            <SeverityChip severity={item.test.severity} />\r\n          </TableCell>\r\n          <TableCell>\r\n            <StatusChip status={item.result.pass ? 'passed' : 'failed'} />\r\n          </TableCell>\r\n          <TableCell align=\"right\">\r\n            <ComplianceScoreGauge \r\n              score={item.result.score * 100} \r\n              size={36} \r\n              showPercent={false}\r\n            />\r\n          </TableCell>\r\n        </TableRow>\r\n        <TableRow>\r\n          <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n            <Collapse in={expandedRows[item.test.id]} timeout=\"auto\" unmountOnExit>\r\n              <Box sx={{ margin: 1, py: 2 }}>\r\n                <Typography variant=\"subtitle2\" gutterBottom component=\"div\">\r\n                  Test Details\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} md={6}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {item.test.description}\r\n                    </Typography>\r\n                    \r\n                    {item.result.metrics && (\r\n                      <Box sx={{ mt: 2 }}>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>Metrics</Typography>\r\n                        <Box component=\"dl\" sx={{ \r\n                          display: 'grid', \r\n                          gridTemplateColumns: 'auto 1fr',\r\n                          rowGap: '4px',\r\n                          columnGap: '8px'\r\n                        }}>\r\n                          {Object.entries(item.result.metrics).map(([key, value]) => (\r\n                            <React.Fragment key={key}>\r\n                              <Box component=\"dt\" sx={{ fontWeight: 'bold', color: 'text.secondary' }}>\r\n                                {key.replace(/_/g, ' ')}:\r\n                              </Box>\r\n                              <Box component=\"dd\" sx={{ m: 0 }}>\r\n                                {formatMetricValue(value)}\r\n                              </Box>\r\n                            </React.Fragment>\r\n                          ))}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item xs={12} md={6}>\r\n                    {item.result.recommendations && item.result.recommendations.length > 0 && (\r\n                      <Box>\r\n                        <Typography variant=\"subtitle2\" gutterBottom>\r\n                          Recommendations\r\n                        </Typography>\r\n                        <Box component=\"ul\" sx={{ \r\n                          m: 0, \r\n                          pl: 2,\r\n                          '& li': {\r\n                            mb: 1\r\n                          }\r\n                        }}>\r\n                          {item.result.recommendations.map((rec, index) => (\r\n                            <li key={index}>\r\n                              <Typography variant=\"body2\">{rec}</Typography>\r\n                            </li>\r\n                          ))}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Collapse>\r\n          </TableCell>\r\n        </TableRow>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Run Compliance Tests\r\n      </Typography>\r\n      \r\n      {selectedTests.length === 0 ? (\r\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\r\n          No tests have been selected. Please go back to Test Configuration to select tests.\r\n        </Alert>\r\n      ) : (\r\n        <Paper sx={{ p: 3, mb: 3 }}>\r\n          <Box sx={{ mb: 3 }}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Test Summary\r\n            </Typography>\r\n            \r\n            <Grid container spacing={2}>\r\n              {Object.entries(groupTestsByCategory()).map(([category, count]) => (\r\n                <Grid item xs={6} sm={4} md={3} key={category}>\r\n                  <Paper \r\n                    elevation={0} \r\n                    sx={{ \r\n                      p: 2, \r\n                      bgcolor: 'rgba(0,0,0,0.03)', \r\n                      borderRadius: 2,\r\n                      border: '1px solid rgba(0,0,0,0.08)'\r\n                    }}\r\n                  >\r\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                      <Box \r\n                        sx={{ \r\n                          width: 10, \r\n                          height: 10, \r\n                          borderRadius: '50%', \r\n                          bgcolor: TEST_CATEGORIES[category] || '#757575',\r\n                          mr: 1 \r\n                        }} \r\n                      />\r\n                      <Typography variant=\"body2\">{category}</Typography>\r\n                    </Box>\r\n                    <Typography variant=\"h5\" sx={{ mt: 1, fontWeight: 'medium' }}>\r\n                      {count}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Box>\r\n          \r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch \r\n                  checked={verbose}\r\n                  onChange={(e) => setVerbose(e.target.checked)}\r\n                  disabled={runningTests}\r\n                />\r\n              }\r\n              label=\"Verbose Logging\"\r\n            />\r\n            \r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={runningTests ? <CircularProgress size={20} color=\"inherit\" /> : <PlayArrowIcon />}\r\n              onClick={handleRunTests}\r\n              disabled={runningTests}\r\n            >\r\n              {runningTests ? 'Running Tests...' : 'Run Tests'}\r\n            </Button>\r\n          </Box>\r\n          \r\n          {(runningTests || testComplete) && (\r\n            <Box sx={{ mb: 3 }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\r\n                <Typography variant=\"body2\">\r\n                  {runningTests ? `Running: ${currentTestName}` : 'Test Run Completed'}\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {Math.round(testProgress)}%\r\n                </Typography>\r\n              </Box>\r\n              <LinearProgress \r\n                variant=\"determinate\" \r\n                value={testProgress} \r\n                sx={{ height: 10, borderRadius: 1 }} \r\n              />\r\n            </Box>\r\n          )}\r\n          \r\n          {verbose && (logs.length > 0 || runningTests) && (\r\n            <Box \r\n              ref={logContainerRef}\r\n              sx={{ \r\n                maxHeight: 200, \r\n                overflowY: 'auto', \r\n                p: 2, \r\n                bgcolor: 'rgba(0,0,0,0.03)', \r\n                borderRadius: 1,\r\n                fontFamily: 'monospace',\r\n                fontSize: 13,\r\n                mb: 2\r\n              }}\r\n            >\r\n              {logs.map((log, index) => (\r\n                <Box key={index} sx={{ mb: 0.5 }}>\r\n                  {log}\r\n                </Box>\r\n              ))}\r\n              {runningTests && (\r\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                  <CircularProgress size={14} sx={{ mr: 1 }} />\r\n                  Processing...\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          )}\r\n          \r\n          {testComplete && (\r\n            <>\r\n              <Divider sx={{ my: 3 }} />\r\n              \r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Test Results Summary\r\n              </Typography>\r\n              \r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={4}>\r\n                  <Paper sx={{ p: 2, textAlign: 'center' }}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Total Tests\r\n                    </Typography>\r\n                    <Typography variant=\"h4\">\r\n                      {selectedTests.length}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={6} sm={4}>\r\n                  <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'rgba(76, 175, 80, 0.1)' }}>\r\n                    <Typography variant=\"body2\" color=\"success.main\">\r\n                      Tests Passed\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" color=\"success.main\">\r\n                      {totalPassed}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Grid>\r\n                \r\n                <Grid item xs={6} sm={4}>\r\n                  <Paper sx={{ p: 2, textAlign: 'center', bgcolor: 'rgba(244, 67, 54, 0.1)' }}>\r\n                    <Typography variant=\"body2\" color=\"error.main\">\r\n                      Tests Failed\r\n                    </Typography>\r\n                    <Typography variant=\"h4\" color=\"error.main\">\r\n                      {totalFailed}\r\n                    </Typography>\r\n                  </Paper>\r\n                </Grid>\r\n              </Grid>\r\n              \r\n              <Box sx={{ \r\n                mt: 3, \r\n                p: 3, \r\n                borderRadius: 2, \r\n                bgcolor: 'rgba(0,0,0,0.03)',\r\n                textAlign: 'center'\r\n              }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Overall Compliance Score\r\n                </Typography>\r\n                <ComplianceScoreGauge \r\n                  score={overallScore} \r\n                  size={120}\r\n                  label={\r\n                    overallScore >= 80 ? 'Excellent compliance level' : \r\n                    overallScore >= 50 ? 'Moderate compliance level' : \r\n                    'Low compliance level'\r\n                  }\r\n                  sx={{ mb: 1 }}\r\n                />\r\n              </Box>\r\n              \r\n              <Typography variant=\"h6\" sx={{ mt: 4, mb: 2 }}>\r\n                Results by Category\r\n              </Typography>\r\n              \r\n              <Grid container spacing={3}>\r\n                {Object.entries(complianceScores).map(([category, scores]) => {\r\n                  const categoryScore = scores.total > 0 ? (scores.passed / scores.total) * 100 : 0;\r\n                  \r\n                  return (\r\n                    <Grid item xs={12} sm={6} md={4} key={category}>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\r\n                            <Box \r\n                              sx={{ \r\n                                width: 12, \r\n                                height: 12, \r\n                                borderRadius: '50%', \r\n                                bgcolor: TEST_CATEGORIES[category] || '#757575',\r\n                                mr: 1 \r\n                              }} \r\n                            />\r\n                            <Typography variant=\"subtitle1\">\r\n                              {category}\r\n                            </Typography>\r\n                          </Box>\r\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">\r\n                              Passed: {scores.passed}/{scores.total}\r\n                            </Typography>\r\n                            <Typography \r\n                              variant=\"h6\" \r\n                              sx={{ \r\n                                color: categoryScore >= 80 ? 'success.main' : \r\n                                        categoryScore >= 50 ? 'warning.main' : \r\n                                        'error.main'\r\n                              }}\r\n                            >\r\n                              {categoryScore.toFixed(1)}%\r\n                            </Typography>\r\n                          </Box>\r\n                          <ProgressBar value={categoryScore} sx={{ mt: 1 }} />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid>\r\n              \r\n              <Typography variant=\"h6\" sx={{ mt: 4, mb: 2 }}>\r\n                Detailed Test Results\r\n              </Typography>\r\n              \r\n              <TableContainer>\r\n                <Table aria-label=\"test results table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell width={50} />\r\n                      <TableCell>Test Name</TableCell>\r\n                      <TableCell width={140}>Category</TableCell>\r\n                      <TableCell width={100}>Severity</TableCell>\r\n                      <TableCell width={100}>Status</TableCell>\r\n                      <TableCell width={80} align=\"right\">Score</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {Object.values(testResults).map((item) => (\r\n                      <TestResultRow key={item.test.id} item={item} />\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              \r\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between' }}>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  startIcon={<RestartAltIcon />}\r\n                  onClick={handleRunTests}\r\n                >\r\n                  Run Tests Again\r\n                </Button>\r\n                \r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  startIcon={<BarChartIcon />}\r\n                  onClick={handleViewResults}\r\n                >\r\n                  View Complete Results\r\n                </Button>\r\n              </Box>\r\n            </>\r\n          )}\r\n        </Paper>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RunTestsPage;"],"names":["API_URL","api","axios","config","token","error","response","customError","_a","_c","_b","_d","runTests","testIds","modelAdapter","testParameters","resolve","testsToRun","MOCK_TESTS","test","results","complianceScores","pass","score","recommendations","RunTestsPage","navigate","useNavigate","selectedTests","modelType","saveTestResults","useAppContext","runningTests","setRunningTests","useState","testProgress","setTestProgress","currentTestName","setCurrentTestName","testResults","setTestResults","setComplianceScores","totalPassed","setTotalPassed","totalFailed","setTotalFailed","overallScore","setOverallScore","testComplete","setTestComplete","expandedRows","setExpandedRows","verbose","setVerbose","logs","setLogs","logContainerRef","useRef","groupTestsByCategory","grouped","TEST_CATEGORIES","category","testsInCategory","testId","t","useEffect","addLog","message","timestamp","prev","handleRunTests","scores","passed","item","failed","totalScore","sum","totalTests","overall","toggleRowExpand","handleViewResults","formatMetricValue","value","TestResultRow","jsxs","React","TableRow","jsx","TableCell","IconButton","KeyboardArrowUpIcon","KeyboardArrowDownIcon","CategoryChip","SeverityChip","StatusChip","ComplianceScoreGauge","Collapse","Box","Typography","Grid","key","rec","index","Container","Alert","Paper","count","FormControlLabel","Switch","e","Button","CircularProgress","PlayArrowIcon","LinearProgress","log","Fragment","Divider","categoryScore","Card","CardContent","ProgressBar","TableContainer","Table","TableHead","TableBody","RestartAltIcon","BarChartIcon"],"mappings":"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"}