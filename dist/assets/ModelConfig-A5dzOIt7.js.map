{"version":3,"file":"ModelConfig-A5dzOIt7.js","sources":["../../src/components/widgets/ModelConfigForm.jsx","../../src/pages/ModelConfig.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  FormHelperText,\r\n  RadioGroup,\r\n  Radio,\r\n  Chip,\r\n  OutlinedInput,\r\n  ListItemText,\r\n} from '@mui/material';\r\n\r\nconst MODEL_CATEGORIES = {\r\n  \"Multimodal\": [\r\n    \"Audio-Text-to-Text\", \"Image-Text-to-Text\", \"Visual Question Answering\",\r\n    \"Document Question Answering\", \"Video-Text-to-Text\", \"Visual Document Retrieval\",\r\n    \"Any-to-Any\"\r\n  ],\r\n  \"Vision\": [\r\n    \"Computer Vision\", \"Depth Estimation\", \"Image Classification\", \"Object Detection\",\r\n    \"Image Segmentation\", \"Text-to-Image\", \"Image-to-Text\", \"Image-to-Image\"\r\n  ],\r\n  \"NLP\": [\r\n    \"Text Classification\", \"Token Classification\", \"Table Question Answering\",\r\n    \"Question Answering\", \"Zero-Shot Classification\", \"Translation\",\r\n    \"Summarization\", \"Text Generation\"\r\n  ],\r\n  \"Audio\": [\r\n    \"Text-to-Speech\", \"Text-to-Audio\", \"Automatic Speech Recognition\",\r\n    \"Audio-to-Audio\", \"Audio Classification\", \"Voice Activity Detection\"\r\n  ],\r\n  \"Tabular\": [\r\n    \"Tabular Classification\", \"Tabular Regression\", \"Time Series Forecasting\"\r\n  ]\r\n};\r\n\r\nconst ModelConfigForm = ({ \r\n  initialValues = {}, \r\n  onChange,\r\n  errors = {} \r\n}) => {\r\n  const [formValues, setFormValues] = useState({\r\n    modelName: initialValues.modelName || 'My AI Model',\r\n    modelCategory: initialValues.modelCategory || '',\r\n    modelType: initialValues.modelType || '',\r\n    accessType: initialValues.accessType || 'API Endpoint',\r\n    apiEndpoint: initialValues.apiEndpoint || 'https://api.example.com/v1/predict',\r\n    apiKey: initialValues.apiKey || '',\r\n    modelPath: initialValues.modelPath || '/path/to/model',\r\n    industry: initialValues.industry || '',\r\n    riskLevel: initialValues.riskLevel || 'Medium',\r\n    dataSensitivity: initialValues.dataSensitivity || ['No Sensitive Data'],\r\n    deploymentEnv: initialValues.deploymentEnv || '',\r\n    userAccess: initialValues.userAccess || '',\r\n    useRealModel: initialValues.useRealModel || false,\r\n    categoryConfig: initialValues.categoryConfig || {},\r\n    ...initialValues\r\n  });\r\n\r\n  const handleChange = (field) => (event) => {\r\n    let value = event.target.value;\r\n    \r\n    // Update form values\r\n    setFormValues(prev => {\r\n      const newValues = {\r\n        ...prev,\r\n        [field]: value\r\n      };\r\n      \r\n      // Call onChange callback if provided\r\n      if (onChange) {\r\n        onChange(newValues);\r\n      }\r\n      \r\n      return newValues;\r\n    });\r\n  };\r\n\r\n  const handleCheckboxChange = (field) => (event) => {\r\n    const value = event.target.checked;\r\n    \r\n    setFormValues(prev => {\r\n      const newValues = {\r\n        ...prev,\r\n        [field]: value\r\n      };\r\n      \r\n      if (onChange) {\r\n        onChange(newValues);\r\n      }\r\n      \r\n      return newValues;\r\n    });\r\n  };\r\n\r\n  const handleCategoryConfigChange = (field) => (event) => {\r\n    const value = event.target.value;\r\n    \r\n    setFormValues(prev => {\r\n      const newValues = {\r\n        ...prev,\r\n        categoryConfig: {\r\n          ...prev.categoryConfig,\r\n          [field]: value\r\n        }\r\n      };\r\n      \r\n      if (onChange) {\r\n        onChange(newValues);\r\n      }\r\n      \r\n      return newValues;\r\n    });\r\n  };\r\n\r\n  const renderCategoryConfig = () => {\r\n    switch (formValues.modelCategory) {\r\n      case 'Vision':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>Vision Model Configuration</Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Input Image Size\"\r\n                  type=\"number\"\r\n                  value={formValues.categoryConfig.imageSize || 224}\r\n                  onChange={handleCategoryConfigChange('imageSize')}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Color Mode</InputLabel>\r\n                  <Select\r\n                    value={formValues.categoryConfig.colorMode || 'RGB'}\r\n                    label=\"Color Mode\"\r\n                    onChange={handleCategoryConfigChange('colorMode')}\r\n                  >\r\n                    <MenuItem value=\"RGB\">RGB</MenuItem>\r\n                    <MenuItem value=\"Grayscale\">Grayscale</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      case 'NLP':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>NLP Model Configuration</Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Maximum Sequence Length\"\r\n                  type=\"number\"\r\n                  value={formValues.categoryConfig.maxLength || 512}\r\n                  onChange={handleCategoryConfigChange('maxLength')}\r\n                  error={!!errors.maxLength}\r\n                  helperText={errors.maxLength}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Tokenizer Type</InputLabel>\r\n                  <Select\r\n                    value={formValues.categoryConfig.tokenizerType || 'WordPiece'}\r\n                    label=\"Tokenizer Type\"\r\n                    onChange={handleCategoryConfigChange('tokenizerType')}\r\n                  >\r\n                    <MenuItem value=\"WordPiece\">WordPiece</MenuItem>\r\n                    <MenuItem value=\"BPE\">BPE</MenuItem>\r\n                    <MenuItem value=\"SentencePiece\">SentencePiece</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      case 'Audio':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>Audio Model Configuration</Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Sample Rate (Hz)\"\r\n                  type=\"number\"\r\n                  value={formValues.categoryConfig.sampleRate || 16000}\r\n                  onChange={handleCategoryConfigChange('sampleRate')}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl fullWidth>\r\n                  <InputLabel>Audio Channels</InputLabel>\r\n                  <Select\r\n                    value={formValues.categoryConfig.audioChannels || 'Mono'}\r\n                    label=\"Audio Channels\"\r\n                    onChange={handleCategoryConfigChange('audioChannels')}\r\n                  >\r\n                    <MenuItem value=\"Mono\">Mono</MenuItem>\r\n                    <MenuItem value=\"Stereo\">Stereo</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      case 'Tabular':\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>Tabular Model Configuration</Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Number of Input Features\"\r\n                  type=\"number\"\r\n                  value={formValues.categoryConfig.inputFeatures || 10}\r\n                  onChange={handleCategoryConfigChange('inputFeatures')}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <FormControl fullWidth required margin=\"normal\" error={!!errors.modelCategory}>\r\n            <InputLabel>Model Category</InputLabel>\r\n            <Select\r\n              value={formValues.modelCategory}\r\n              label=\"Model Category\"\r\n              onChange={handleChange('modelCategory')}\r\n            >\r\n              {Object.keys(MODEL_CATEGORIES).map((category) => (\r\n                <MenuItem key={category} value={category}>{category}</MenuItem>\r\n              ))}\r\n            </Select>\r\n            {errors.modelCategory && (\r\n              <FormHelperText>{errors.modelCategory}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} md={6}>\r\n          <FormControl \r\n            fullWidth \r\n            required \r\n            margin=\"normal\" \r\n            disabled={!formValues.modelCategory}\r\n            error={!!errors.modelType}\r\n          >\r\n            <InputLabel>Model Type</InputLabel>\r\n            <Select\r\n              value={formValues.modelType}\r\n              label=\"Model Type\"\r\n              onChange={handleChange('modelType')}\r\n            >\r\n              {formValues.modelCategory && MODEL_CATEGORIES[formValues.modelCategory].map((type) => (\r\n                <MenuItem key={type} value={type}>{type}</MenuItem>\r\n              ))}\r\n            </Select>\r\n            {errors.modelType && (\r\n              <FormHelperText>{errors.modelType}</FormHelperText>\r\n            )}\r\n          </FormControl>\r\n        </Grid>\r\n        \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Model Name\"\r\n            value={formValues.modelName}\r\n            onChange={handleChange('modelName')}\r\n            margin=\"normal\"\r\n            error={!!errors.modelName}\r\n            helperText={errors.modelName}\r\n          />\r\n        </Grid>\r\n        \r\n        {formValues.modelCategory && renderCategoryConfig()}\r\n        \r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox \r\n                checked={formValues.useRealModel} \r\n                onChange={handleCheckboxChange('useRealModel')}\r\n              />\r\n            }\r\n            label=\"Load real pretrained model (may take longer)\"\r\n          />\r\n          {formValues.useRealModel && (\r\n            <FormHelperText>\r\n              When enabled, will load actual pretrained models from Hugging Face for testing.\r\n            </FormHelperText>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Box sx={{ mt: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Model Access\r\n        </Typography>\r\n        \r\n        <FormControl component=\"fieldset\" margin=\"normal\">\r\n          <RadioGroup\r\n            value={formValues.accessType}\r\n            onChange={handleChange('accessType')}\r\n          >\r\n            <FormControlLabel \r\n              value=\"API Endpoint\" \r\n              control={<Radio />} \r\n              label=\"API Endpoint\" \r\n            />\r\n            <FormControlLabel \r\n              value=\"Local Model\" \r\n              control={<Radio />} \r\n              label=\"Local Model\" \r\n            />\r\n          </RadioGroup>\r\n        </FormControl>\r\n        \r\n        <Box sx={{ mt: 2 }}>\r\n          {formValues.accessType === 'API Endpoint' ? (\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"API Endpoint URL\"\r\n                  value={formValues.apiEndpoint}\r\n                  onChange={handleChange('apiEndpoint')}\r\n                  required\r\n                  error={!!errors.apiEndpoint}\r\n                  helperText={errors.apiEndpoint}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"API Key (if required)\"\r\n                  type=\"password\"\r\n                  value={formValues.apiKey}\r\n                  onChange={handleChange('apiKey')}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          ) : (\r\n            <TextField\r\n              fullWidth\r\n              label=\"Local Model Path\"\r\n              value={formValues.modelPath}\r\n              onChange={handleChange('modelPath')}\r\n              required\r\n              error={!!errors.modelPath}\r\n              helperText={errors.modelPath}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box sx={{ mt: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Use Case & Risk Profile\r\n        </Typography>\r\n        \r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth required margin=\"normal\" error={!!errors.industry}>\r\n              <InputLabel>Industry</InputLabel>\r\n              <Select\r\n                value={formValues.industry}\r\n                label=\"Industry\"\r\n                onChange={handleChange('industry')}\r\n              >\r\n                {[\"Healthcare\", \"Finance\", \"Retail\", \"Manufacturing\", \"Education\", \"Government\", \"Other\"].map((option) => (\r\n                  <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.industry && (\r\n                <FormHelperText>{errors.industry}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth required margin=\"normal\">\r\n              <InputLabel>Risk Level</InputLabel>\r\n              <Select\r\n                value={formValues.riskLevel}\r\n                label=\"Risk Level\"\r\n                onChange={handleChange('riskLevel')}\r\n              >\r\n                {[\"Low\", \"Medium\", \"High\", \"Critical\"].map((option) => (\r\n                  <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>Higher risk models require more rigorous compliance testing</FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth margin=\"normal\">\r\n              <InputLabel>Data Sensitivity</InputLabel>\r\n              <Select\r\n                multiple\r\n                value={formValues.dataSensitivity}\r\n                onChange={handleChange('dataSensitivity')}\r\n                input={<OutlinedInput label=\"Data Sensitivity\" />}\r\n                renderValue={(selected) => (\r\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n                    {selected.map((value) => (\r\n                      <Chip key={value} label={value} size=\"small\" />\r\n                    ))}\r\n                  </Box>\r\n                )}\r\n              >\r\n                {[\r\n                  \"Personal Identifiable Information (PII)\", \r\n                  \"Protected Health Information (PHI)\",\r\n                  \"Financial Data\",\r\n                  \"Biometric Data\",\r\n                  \"Location Data\",\r\n                  \"Children's Data\",\r\n                  \"No Sensitive Data\"\r\n                ].map((option) => (\r\n                  <MenuItem key={option} value={option}>\r\n                    <Checkbox checked={formValues.dataSensitivity.indexOf(option) > -1} />\r\n                    <ListItemText primary={option} />\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth required margin=\"normal\" error={!!errors.deploymentEnv}>\r\n              <InputLabel>Deployment Environment</InputLabel>\r\n              <Select\r\n                value={formValues.deploymentEnv}\r\n                label=\"Deployment Environment\"\r\n                onChange={handleChange('deploymentEnv')}\r\n              >\r\n                {[\"Cloud (Public)\", \"Cloud (Private)\", \"On-Premises\", \"Edge/IoT\", \"Mobile\"].map((option) => (\r\n                  <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.deploymentEnv && (\r\n                <FormHelperText>{errors.deploymentEnv}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n          \r\n          <Grid item xs={12} md={6}>\r\n            <FormControl fullWidth required margin=\"normal\" error={!!errors.userAccess}>\r\n              <InputLabel>User Access Pattern</InputLabel>\r\n              <Select\r\n                value={formValues.userAccess}\r\n                label=\"User Access Pattern\"\r\n                onChange={handleChange('userAccess')}\r\n              >\r\n                {[\r\n                  \"Public-Facing\", \r\n                  \"Authenticated Users Only\", \r\n                  \"Internal (Employee-Facing)\", \r\n                  \"Limited Access (Specific Roles)\"\r\n                ].map((option) => (\r\n                  <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                ))}\r\n              </Select>\r\n              {errors.userAccess && (\r\n                <FormHelperText>{errors.userAccess}</FormHelperText>\r\n              )}\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ModelConfigForm;","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Alert,\r\n  Snackbar,\r\n  CircularProgress,\r\n  Divider,\r\n  Container,\r\n} from '@mui/material';\r\nimport ModelConfigForm from '../components/widgets/ModelConfigForm';\r\nimport { useAppContext } from '../context/AppContext';\r\n\r\nconst STEPS = ['Model Type', 'Model Access', 'Use Case & Risk Profile', 'Configuration Summary'];\r\n\r\nconst ModelConfigPage = () => {\r\n  const navigate = useNavigate();\r\n  const { configureModel, modelConfigured } = useAppContext();\r\n  \r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [formValues, setFormValues] = useState(modelConfigured || {});\r\n  const [validationErrors, setValidationErrors] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [configSuccess, setConfigSuccess] = useState(false);\r\n  const [configError, setConfigError] = useState('');\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  \r\n  const handleFormChange = (values) => {\r\n    setFormValues(values);\r\n    \r\n    // Clear validation errors for changed fields\r\n    const updatedErrors = { ...validationErrors };\r\n    Object.keys(values).forEach(key => {\r\n      if (updatedErrors[key]) {\r\n        delete updatedErrors[key];\r\n      }\r\n    });\r\n    setValidationErrors(updatedErrors);\r\n  };\r\n  \r\n  const validateStep = () => {\r\n    const errors = {};\r\n    \r\n    switch (activeStep) {\r\n      case 0: // Model Type validation\r\n        if (!formValues.modelCategory) {\r\n          errors.modelCategory = 'Please select a model category';\r\n        }\r\n        if (!formValues.modelType) {\r\n          errors.modelType = 'Please select a model type';\r\n        }\r\n        break;\r\n        \r\n      case 1: // Model Access validation\r\n        if (formValues.accessType === 'API Endpoint' && !formValues.apiEndpoint) {\r\n          errors.apiEndpoint = 'API endpoint is required';\r\n        } else if (formValues.accessType === 'Local Model' && !formValues.modelPath) {\r\n          errors.modelPath = 'Model path is required';\r\n        }\r\n        break;\r\n        \r\n      case 2: // Use Case & Risk Profile validation\r\n        if (!formValues.industry) {\r\n          errors.industry = 'Please select an industry';\r\n        }\r\n        if (!formValues.deploymentEnv) {\r\n          errors.deploymentEnv = 'Please select a deployment environment';\r\n        }\r\n        if (!formValues.userAccess) {\r\n          errors.userAccess = 'Please select a user access pattern';\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        break;\r\n    }\r\n    \r\n    setValidationErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n  \r\n  const handleNext = () => {\r\n    if (validateStep()) {\r\n      setActiveStep((prevStep) => prevStep + 1);\r\n    }\r\n  };\r\n  \r\n  const handleBack = () => {\r\n    setActiveStep((prevStep) => prevStep - 1);\r\n  };\r\n  \r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    setConfigError('');\r\n    \r\n    try {\r\n      // Simulate model initialization delay\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Mock model adapter for demonstration\r\n      const mockModelAdapter = {\r\n        modelType: formValues.modelType,\r\n        getPrediction: (input) => {\r\n          return {\r\n            prediction: [0.7, 0.3],\r\n            confidence: 0.7,\r\n            input_length: input.length\r\n          };\r\n        }\r\n      };\r\n      \r\n      // Gather configuration\r\n      const modelConfig = {\r\n        ...formValues,\r\n        modelAdapter: mockModelAdapter,\r\n        type: formValues.modelType // For sidebar display\r\n      };\r\n      \r\n      // Save configuration using context\r\n      configureModel(modelConfig);\r\n      \r\n      setConfigSuccess(true);\r\n      setSnackbarOpen(true);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setConfigError(`Error initializing model: ${error.message || 'Unknown error'}`);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n  \r\n  const handleContinue = () => {\r\n    navigate('/test-config');\r\n  };\r\n  \r\n  const renderStepContent = () => {\r\n    switch (activeStep) {\r\n      case 0:\r\n      case 1:\r\n      case 2:\r\n        return (\r\n          <ModelConfigForm\r\n            initialValues={formValues}\r\n            onChange={handleFormChange}\r\n            errors={validationErrors}\r\n          />\r\n        );\r\n        \r\n      case 3: // Summary\r\n        return (\r\n          <Box>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Configuration Summary\r\n            </Typography>\r\n            \r\n            <Paper sx={{ p: 3 }}>\r\n              <Box>\r\n                <Typography variant=\"subtitle1\">Model Information</Typography>\r\n                <Divider sx={{ mb: 2 }} />\r\n                <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Name:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.modelName}</Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Type:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.modelType}</Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Category:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.modelCategory}</Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Access Method:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.accessType}</Typography>\r\n                  </Box>\r\n                  \r\n                  {formValues.accessType === 'API Endpoint' && (\r\n                    <Box sx={{ gridColumn: '1 / -1' }}>\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">API Endpoint:</Typography>\r\n                      <Typography variant=\"body1\" sx={{ wordBreak: 'break-all' }}>\r\n                        {formValues.apiEndpoint}\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                  \r\n                  {formValues.accessType === 'Local Model' && (\r\n                    <Box sx={{ gridColumn: '1 / -1' }}>\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">Model Path:</Typography>\r\n                      <Typography variant=\"body1\" sx={{ wordBreak: 'break-all' }}>\r\n                        {formValues.modelPath}\r\n                      </Typography>\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n              </Box>\r\n              \r\n              <Box sx={{ mt: 4 }}>\r\n                <Typography variant=\"subtitle1\">Use Case & Risk Profile</Typography>\r\n                <Divider sx={{ mb: 2 }} />\r\n                <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Industry:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.industry}</Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Risk Level:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.riskLevel}</Typography>\r\n                  </Box>\r\n                  <Box sx={{ gridColumn: '1 / -1' }}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Data Sensitivity:</Typography>\r\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\r\n                      {formValues.dataSensitivity?.map((value) => (\r\n                        <Typography key={value} variant=\"body2\" component=\"span\" sx={{ \r\n                          bgcolor: 'rgba(0,0,0,0.08)', \r\n                          px: 1, \r\n                          py: 0.5, \r\n                          borderRadius: 1,\r\n                          fontSize: '0.85rem'\r\n                        }}>\r\n                          {value}\r\n                        </Typography>\r\n                      ))}\r\n                    </Box>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">Deployment Environment:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.deploymentEnv}</Typography>\r\n                  </Box>\r\n                  <Box>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">User Access Pattern:</Typography>\r\n                    <Typography variant=\"body1\">{formValues.userAccess}</Typography>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n              \r\n              {configError && (\r\n                <Alert severity=\"error\" sx={{ mt: 3 }}>\r\n                  {configError}\r\n                </Alert>\r\n              )}\r\n              \r\n              {configSuccess && (\r\n                <Alert severity=\"success\" sx={{ mt: 3 }}>\r\n                  Model configuration saved successfully!\r\n                </Alert>\r\n              )}\r\n            </Paper>\r\n          </Box>\r\n        );\r\n        \r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Model Configuration\r\n      </Typography>\r\n      \r\n      <Paper sx={{ p: 3, mb: 3 }}>\r\n        <Stepper activeStep={activeStep} alternativeLabel sx={{ mb: 4 }}>\r\n          {STEPS.map((label) => (\r\n            <Step key={label}>\r\n              <StepLabel>{label}</StepLabel>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n        \r\n        <Box>\r\n          {renderStepContent()}\r\n        </Box>\r\n        \r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>\r\n          <Button\r\n            disabled={activeStep === 0 || loading}\r\n            onClick={handleBack}\r\n          >\r\n            Back\r\n          </Button>\r\n          \r\n          <Box>\r\n            {activeStep === STEPS.length - 1 ? (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSubmit}\r\n                disabled={loading || configSuccess}\r\n                startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : null}\r\n              >\r\n                {loading ? 'Processing...' : 'Save Configuration'}\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleNext}\r\n              >\r\n                Next\r\n              </Button>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n      \r\n      {configSuccess && (\r\n        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'center' }}>\r\n          <Button \r\n            variant=\"contained\" \r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={handleContinue}\r\n          >\r\n            Continue to Test Configuration\r\n          </Button>\r\n        </Box>\r\n      )}\r\n      \r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        message=\"Model configuration saved successfully!\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ModelConfigPage;"],"names":["MODEL_CATEGORIES","ModelConfigForm","initialValues","onChange","errors","formValues","setFormValues","useState","handleChange","field","event","value","prev","newValues","handleCheckboxChange","handleCategoryConfigChange","renderCategoryConfig","Box","jsx","Typography","jsxs","Grid","TextField","FormControl","InputLabel","Select","MenuItem","category","FormHelperText","type","FormControlLabel","Checkbox","RadioGroup","Radio","option","OutlinedInput","selected","Chip","ListItemText","STEPS","ModelConfigPage","navigate","useNavigate","configureModel","modelConfigured","useAppContext","activeStep","setActiveStep","validationErrors","setValidationErrors","loading","setLoading","configSuccess","setConfigSuccess","configError","setConfigError","snackbarOpen","setSnackbarOpen","handleFormChange","values","updatedErrors","key","validateStep","handleNext","prevStep","handleBack","handleSubmit","resolve","mockModelAdapter","input","modelConfig","error","handleCloseSnackbar","handleContinue","renderStepContent","Paper","Divider","_a","Alert","Container","Stepper","label","Step","StepLabel","Button","CircularProgress","Snackbar"],"mappings":"i/BAoBA,MAAMA,EAAmB,CACvB,WAAc,CACZ,qBAAsB,qBAAsB,4BAC5C,8BAA+B,qBAAsB,4BACrD,YACF,EACA,OAAU,CACR,kBAAmB,mBAAoB,uBAAwB,mBAC/D,qBAAsB,gBAAiB,gBAAiB,gBAC1D,EACA,IAAO,CACL,sBAAuB,uBAAwB,2BAC/C,qBAAsB,2BAA4B,cAClD,gBAAiB,iBACnB,EACA,MAAS,CACP,iBAAkB,gBAAiB,+BACnC,iBAAkB,uBAAwB,0BAC5C,EACA,QAAW,CACT,yBAA0B,qBAAsB,yBAAA,CAEpD,EAEMC,GAAkB,CAAC,CACvB,cAAAC,EAAgB,CAAC,EACjB,SAAAC,EACA,OAAAC,EAAS,CAAA,CACX,IAAM,CACJ,KAAM,CAACC,EAAYC,CAAa,EAAIC,WAAS,CAC3C,UAAWL,EAAc,WAAa,cACtC,cAAeA,EAAc,eAAiB,GAC9C,UAAWA,EAAc,WAAa,GACtC,WAAYA,EAAc,YAAc,eACxC,YAAaA,EAAc,aAAe,qCAC1C,OAAQA,EAAc,QAAU,GAChC,UAAWA,EAAc,WAAa,iBACtC,SAAUA,EAAc,UAAY,GACpC,UAAWA,EAAc,WAAa,SACtC,gBAAiBA,EAAc,iBAAmB,CAAC,mBAAmB,EACtE,cAAeA,EAAc,eAAiB,GAC9C,WAAYA,EAAc,YAAc,GACxC,aAAcA,EAAc,cAAgB,GAC5C,eAAgBA,EAAc,gBAAkB,CAAC,EACjD,GAAGA,CAAA,CACJ,EAEKM,EAAgBC,GAAWC,GAAU,CACrC,IAAAC,EAAQD,EAAM,OAAO,MAGzBJ,EAAsBM,GAAA,CACpB,MAAMC,EAAY,CAChB,GAAGD,EACH,CAACH,CAAK,EAAGE,CACX,EAGA,OAAIR,GACFA,EAASU,CAAS,EAGbA,CAAA,CACR,CACH,EAEMC,EAAwBL,GAAWC,GAAU,CAC3C,MAAAC,EAAQD,EAAM,OAAO,QAE3BJ,EAAsBM,GAAA,CACpB,MAAMC,EAAY,CAChB,GAAGD,EACH,CAACH,CAAK,EAAGE,CACX,EAEA,OAAIR,GACFA,EAASU,CAAS,EAGbA,CAAA,CACR,CACH,EAEME,EAA8BN,GAAWC,GAAU,CACjD,MAAAC,EAAQD,EAAM,OAAO,MAE3BJ,EAAsBM,GAAA,CACpB,MAAMC,EAAY,CAChB,GAAGD,EACH,eAAgB,CACd,GAAGA,EAAK,eACR,CAACH,CAAK,EAAGE,CAAA,CAEb,EAEA,OAAIR,GACFA,EAASU,CAAS,EAGbA,CAAA,CACR,CACH,EAEMG,EAAuB,IAAM,CACjC,OAAQX,EAAW,cAAe,CAChC,IAAK,SACH,cACGY,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,YAAY,aAAY,GAAC,SAA0B,6BAAA,EACtEC,EAAA,KAAAC,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,MAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,mBACN,KAAK,SACL,MAAOjB,EAAW,eAAe,WAAa,IAC9C,SAAUU,EAA2B,WAAW,CAAA,CAAA,EAEpD,EACAG,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAD,EAAAA,KAACG,EAAY,CAAA,UAAS,GACpB,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAU,YAAA,CAAA,EACtBJ,EAAA,KAACK,EAAA,CACC,MAAOpB,EAAW,eAAe,WAAa,MAC9C,MAAM,aACN,SAAUU,EAA2B,WAAW,EAEhD,SAAA,CAACG,EAAA,IAAAQ,EAAA,CAAS,MAAM,MAAM,SAAG,MAAA,EACxBR,EAAA,IAAAQ,EAAA,CAAS,MAAM,YAAY,SAAS,WAAA,CAAA,CAAA,CAAA,CAAA,CACvC,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAEJ,IAAK,MACH,cACGT,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,YAAY,aAAY,GAAC,SAAuB,0BAAA,EACnEC,EAAA,KAAAC,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,MAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,0BACN,KAAK,SACL,MAAOjB,EAAW,eAAe,WAAa,IAC9C,SAAUU,EAA2B,WAAW,EAChD,MAAO,CAAC,CAACX,EAAO,UAChB,WAAYA,EAAO,SAAA,CAAA,EAEvB,EACAc,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAD,EAAAA,KAACG,EAAY,CAAA,UAAS,GACpB,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAc,gBAAA,CAAA,EAC1BJ,EAAA,KAACK,EAAA,CACC,MAAOpB,EAAW,eAAe,eAAiB,YAClD,MAAM,iBACN,SAAUU,EAA2B,eAAe,EAEpD,SAAA,CAACG,EAAA,IAAAQ,EAAA,CAAS,MAAM,YAAY,SAAS,YAAA,EACpCR,EAAA,IAAAQ,EAAA,CAAS,MAAM,MAAM,SAAG,MAAA,EACxBR,EAAA,IAAAQ,EAAA,CAAS,MAAM,gBAAgB,SAAa,eAAA,CAAA,CAAA,CAAA,CAAA,CAC/C,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAEJ,IAAK,QACH,cACGT,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,YAAY,aAAY,GAAC,SAAyB,4BAAA,EACrEC,EAAA,KAAAC,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,MAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,mBACN,KAAK,SACL,MAAOjB,EAAW,eAAe,YAAc,KAC/C,SAAUU,EAA2B,YAAY,CAAA,CAAA,EAErD,EACAG,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAD,EAAAA,KAACG,EAAY,CAAA,UAAS,GACpB,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAc,gBAAA,CAAA,EAC1BJ,EAAA,KAACK,EAAA,CACC,MAAOpB,EAAW,eAAe,eAAiB,OAClD,MAAM,iBACN,SAAUU,EAA2B,eAAe,EAEpD,SAAA,CAACG,EAAA,IAAAQ,EAAA,CAAS,MAAM,OAAO,SAAI,OAAA,EAC1BR,EAAA,IAAAQ,EAAA,CAAS,MAAM,SAAS,SAAM,QAAA,CAAA,CAAA,CAAA,CAAA,CACjC,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAEJ,IAAK,UACH,cACGT,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,YAAY,aAAY,GAAC,SAA2B,8BAAA,EACxED,EAAA,IAACG,EAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAAH,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,2BACN,KAAK,SACL,MAAOjB,EAAW,eAAe,eAAiB,GAClD,SAAUU,EAA2B,eAAe,CAAA,GAExD,CACF,CAAA,CAAA,EACF,EAEJ,QACS,OAAA,IAAA,CAEb,EAEA,cACGE,EACC,CAAA,SAAA,CAAAG,EAAA,KAACC,EAAK,CAAA,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,EAAAA,IAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAACD,OAAAG,EAAA,CAAY,UAAS,GAAC,SAAQ,GAAC,OAAO,SAAS,MAAO,CAAC,CAACnB,EAAO,cAC9D,SAAA,CAAAc,EAAAA,IAACM,GAAW,SAAc,gBAAA,CAAA,EAC1BN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,cAClB,MAAM,iBACN,SAAUG,EAAa,eAAe,EAErC,SAAO,OAAA,KAAKR,CAAgB,EAAE,IAAK2B,GAClCT,EAAA,IAACQ,EAAwB,CAAA,MAAOC,EAAW,SAAAA,CAAA,EAA5BA,CAAqC,CACrD,CAAA,CACH,EACCvB,EAAO,eACLc,MAAAU,EAAA,CAAgB,WAAO,aAAc,CAAA,CAAA,CAAA,CAE1C,CACF,CAAA,QAECP,EAAK,CAAA,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAD,EAAA,KAACG,EAAA,CACC,UAAS,GACT,SAAQ,GACR,OAAO,SACP,SAAU,CAAClB,EAAW,cACtB,MAAO,CAAC,CAACD,EAAO,UAEhB,SAAA,CAAAc,EAAAA,IAACM,GAAW,SAAU,YAAA,CAAA,EACtBN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,UAClB,MAAM,aACN,SAAUG,EAAa,WAAW,EAEjC,SAAWH,EAAA,eAAiBL,EAAiBK,EAAW,aAAa,EAAE,IAAKwB,SAC1EH,EAAoB,CAAA,MAAOG,EAAO,SAAAA,CAAA,EAApBA,CAAyB,CACzC,CAAA,CACH,EACCzB,EAAO,WACLc,MAAAU,EAAA,CAAgB,WAAO,SAAU,CAAA,CAAA,CAAA,CAAA,EAGxC,EAECV,EAAA,IAAAG,EAAA,CAAK,KAAI,GAAC,GAAI,GACb,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,aACN,MAAOjB,EAAW,UAClB,SAAUG,EAAa,WAAW,EAClC,OAAO,SACP,MAAO,CAAC,CAACJ,EAAO,UAChB,WAAYA,EAAO,SAAA,CAAA,EAEvB,EAECC,EAAW,eAAiBW,EAAqB,EAEjDI,EAAA,KAAAC,EAAA,CAAK,KAAI,GAAC,GAAI,GACb,SAAA,CAAAH,EAAA,IAACY,EAAA,CACC,QACEZ,EAAA,IAACa,EAAA,CACC,QAAS1B,EAAW,aACpB,SAAUS,EAAqB,cAAc,CAAA,CAC/C,EAEF,MAAM,8CAAA,CACR,EACCT,EAAW,cACTa,EAAA,IAAAU,EAAA,CAAe,SAEhB,iFAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,SAECX,EAAI,CAAA,GAAI,CAAE,GAAI,CACb,EAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,KAAK,aAAY,GAAC,SAEtC,eAAA,EAECD,EAAA,IAAAK,EAAA,CAAY,UAAU,WAAW,OAAO,SACvC,SAAAH,EAAA,KAACY,EAAA,CACC,MAAO3B,EAAW,WAClB,SAAUG,EAAa,YAAY,EAEnC,SAAA,CAAAU,EAAA,IAACY,EAAA,CACC,MAAM,eACN,cAAUG,EAAM,EAAA,EAChB,MAAM,cAAA,CACR,EACAf,EAAA,IAACY,EAAA,CACC,MAAM,cACN,cAAUG,EAAM,EAAA,EAChB,MAAM,aAAA,CAAA,CACR,CAAA,CAAA,EAEJ,EAECf,EAAA,IAAAD,EAAA,CAAI,GAAI,CAAE,GAAI,CAAE,EACd,SAAWZ,EAAA,aAAe,eACxBe,EAAAA,KAAAC,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,mBACN,MAAOjB,EAAW,YAClB,SAAUG,EAAa,aAAa,EACpC,SAAQ,GACR,MAAO,CAAC,CAACJ,EAAO,YAChB,WAAYA,EAAO,WAAA,CAAA,EAEvB,EACCc,EAAA,IAAAG,EAAA,CAAK,KAAI,GAAC,GAAI,GACb,SAAAH,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,wBACN,KAAK,WACL,MAAOjB,EAAW,OAClB,SAAUG,EAAa,QAAQ,CAAA,CAAA,CAEnC,CAAA,CAAA,CAAA,CACF,EAEAU,EAAA,IAACI,EAAA,CACC,UAAS,GACT,MAAM,mBACN,MAAOjB,EAAW,UAClB,SAAUG,EAAa,WAAW,EAClC,SAAQ,GACR,MAAO,CAAC,CAACJ,EAAO,UAChB,WAAYA,EAAO,SAAA,CAAA,CAGzB,CAAA,CAAA,EACF,SAECa,EAAI,CAAA,GAAI,CAAE,GAAI,CACb,EAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,KAAK,aAAY,GAAC,SAEtC,0BAAA,EAECC,EAAA,KAAAC,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAH,EAAAA,IAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAACD,OAAAG,EAAA,CAAY,UAAS,GAAC,SAAQ,GAAC,OAAO,SAAS,MAAO,CAAC,CAACnB,EAAO,SAC9D,SAAA,CAAAc,EAAAA,IAACM,GAAW,SAAQ,UAAA,CAAA,EACpBN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,SAClB,MAAM,WACN,SAAUG,EAAa,UAAU,EAEhC,UAAC,aAAc,UAAW,SAAU,gBAAiB,YAAa,aAAc,OAAO,EAAE,IAAK0B,GAC5FhB,EAAAA,IAAAQ,EAAA,CAAsB,MAAOQ,EAAS,SAAAA,CAAA,EAAxBA,CAA+B,CAC/C,CAAA,CACH,EACC9B,EAAO,UACLc,MAAAU,EAAA,CAAgB,WAAO,QAAS,CAAA,CAAA,CAAA,CAErC,CACF,CAAA,EAECV,MAAAG,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAD,EAAAA,KAACG,GAAY,UAAS,GAAC,SAAQ,GAAC,OAAO,SACrC,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAU,YAAA,CAAA,EACtBN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,UAClB,MAAM,aACN,SAAUG,EAAa,WAAW,EAEjC,SAAC,CAAA,MAAO,SAAU,OAAQ,UAAU,EAAE,IAAK0B,SACzCR,EAAsB,CAAA,MAAOQ,EAAS,SAAAA,CAAA,EAAxBA,CAA+B,CAC/C,CAAA,CACH,EACAhB,EAAAA,IAACU,GAAe,SAA2D,6DAAA,CAAA,CAAA,CAAA,CAC7E,CACF,CAAA,EAEAV,EAAA,IAACG,EAAK,CAAA,KAAI,GAAC,GAAI,GACb,SAAAD,EAAAA,KAACG,EAAY,CAAA,UAAS,GAAC,OAAO,SAC5B,SAAA,CAAAL,EAAAA,IAACM,GAAW,SAAgB,kBAAA,CAAA,EAC5BN,EAAA,IAACO,EAAA,CACC,SAAQ,GACR,MAAOpB,EAAW,gBAClB,SAAUG,EAAa,iBAAiB,EACxC,MAAOU,EAAAA,IAACiB,EAAc,CAAA,MAAM,kBAAmB,CAAA,EAC/C,YAAcC,GACXlB,MAAAD,EAAA,CAAI,GAAI,CAAE,QAAS,OAAQ,SAAU,OAAQ,IAAK,IAChD,SAASmB,EAAA,IAAKzB,GACZO,EAAAA,IAAAmB,EAAA,CAAiB,MAAO1B,EAAO,KAAK,OAAA,EAA1BA,CAAkC,CAC9C,CACH,CAAA,EAGD,SAAA,CACC,0CACA,qCACA,iBACA,iBACA,gBACA,kBACA,mBAAA,EACA,IAAKuB,GACJd,EAAA,KAAAM,EAAA,CAAsB,MAAOQ,EAC5B,SAAA,CAAAhB,MAACa,GAAS,QAAS1B,EAAW,gBAAgB,QAAQ6B,CAAM,EAAI,GAAI,EACpEhB,EAAAA,IAACoB,EAAa,CAAA,QAASJ,CAAQ,CAAA,CAAA,CAAA,EAFlBA,CAGf,CACD,CAAA,CAAA,CACH,CAAA,CACF,CACF,CAAA,EAEAhB,EAAAA,IAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAACD,OAAAG,EAAA,CAAY,UAAS,GAAC,SAAQ,GAAC,OAAO,SAAS,MAAO,CAAC,CAACnB,EAAO,cAC9D,SAAA,CAAAc,EAAAA,IAACM,GAAW,SAAsB,wBAAA,CAAA,EAClCN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,cAClB,MAAM,yBACN,SAAUG,EAAa,eAAe,EAErC,UAAC,iBAAkB,kBAAmB,cAAe,WAAY,QAAQ,EAAE,IAAK0B,SAC9ER,EAAsB,CAAA,MAAOQ,EAAS,SAAAA,CAAA,EAAxBA,CAA+B,CAC/C,CAAA,CACH,EACC9B,EAAO,eACLc,MAAAU,EAAA,CAAgB,WAAO,aAAc,CAAA,CAAA,CAAA,CAE1C,CACF,CAAA,EAEAV,EAAAA,IAACG,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAACD,OAAAG,EAAA,CAAY,UAAS,GAAC,SAAQ,GAAC,OAAO,SAAS,MAAO,CAAC,CAACnB,EAAO,WAC9D,SAAA,CAAAc,EAAAA,IAACM,GAAW,SAAmB,qBAAA,CAAA,EAC/BN,EAAA,IAACO,EAAA,CACC,MAAOpB,EAAW,WAClB,MAAM,sBACN,SAAUG,EAAa,YAAY,EAElC,SAAA,CACC,gBACA,2BACA,6BACA,iCACF,EAAE,IAAK0B,GACLhB,EAAAA,IAACQ,GAAsB,MAAOQ,EAAS,SAAxBA,CAAA,EAAAA,CAA+B,CAC/C,CAAA,CACH,EACC9B,EAAO,YACLc,MAAAU,EAAA,CAAgB,WAAO,UAAW,CAAA,CAAA,CAAA,CAEvC,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,EC7dMW,EAAQ,CAAC,aAAc,eAAgB,0BAA2B,uBAAuB,EAEzFC,GAAkB,IAAM,CAC5B,MAAMC,EAAWC,EAAY,EACvB,CAAE,eAAAC,EAAgB,gBAAAC,CAAgB,EAAIC,EAAc,EAEpD,CAACC,EAAYC,CAAa,EAAIxC,EAAAA,SAAS,CAAC,EACxC,CAACF,EAAYC,CAAa,EAAIC,EAAAA,SAASqC,GAAmB,CAAA,CAAE,EAC5D,CAACI,EAAkBC,CAAmB,EAAI1C,EAAAA,SAAS,CAAA,CAAE,EACrD,CAAC2C,EAASC,CAAU,EAAI5C,EAAAA,SAAS,EAAK,EACtC,CAAC6C,EAAeC,CAAgB,EAAI9C,EAAAA,SAAS,EAAK,EAClD,CAAC+C,EAAaC,CAAc,EAAIhD,EAAAA,SAAS,EAAE,EAC3C,CAACiD,EAAcC,CAAe,EAAIlD,EAAAA,SAAS,EAAK,EAEhDmD,EAAoBC,GAAW,CACnCrD,EAAcqD,CAAM,EAGd,MAAAC,EAAgB,CAAE,GAAGZ,CAAiB,EAC5C,OAAO,KAAKW,CAAM,EAAE,QAAeE,GAAA,CAC7BD,EAAcC,CAAG,GACnB,OAAOD,EAAcC,CAAG,CAC1B,CACD,EACDZ,EAAoBW,CAAa,CACnC,EAEME,EAAe,IAAM,CACzB,MAAM1D,EAAS,CAAC,EAEhB,OAAQ0C,EAAY,CAClB,IAAK,GACEzC,EAAW,gBACdD,EAAO,cAAgB,kCAEpBC,EAAW,YACdD,EAAO,UAAY,8BAErB,MAEF,IAAK,GACCC,EAAW,aAAe,gBAAkB,CAACA,EAAW,YAC1DD,EAAO,YAAc,2BACZC,EAAW,aAAe,eAAiB,CAACA,EAAW,YAChED,EAAO,UAAY,0BAErB,MAEF,IAAK,GACEC,EAAW,WACdD,EAAO,SAAW,6BAEfC,EAAW,gBACdD,EAAO,cAAgB,0CAEpBC,EAAW,aACdD,EAAO,WAAa,uCAEtB,KAGA,CAGJ,OAAA6C,EAAoB7C,CAAM,EACnB,OAAO,KAAKA,CAAM,EAAE,SAAW,CACxC,EAEM2D,EAAa,IAAM,CACnBD,KACYf,EAACiB,GAAaA,EAAW,CAAC,CAE5C,EAEMC,EAAa,IAAM,CACTlB,EAACiB,GAAaA,EAAW,CAAC,CAC1C,EAEME,EAAe,SAAY,CAC/Bf,EAAW,EAAI,EACfI,EAAe,EAAE,EAEb,GAAA,CAEF,MAAM,IAAI,QAAQY,GAAW,WAAWA,EAAS,GAAI,CAAC,EAGtD,MAAMC,EAAmB,CACvB,UAAW/D,EAAW,UACtB,cAAgBgE,IACP,CACL,WAAY,CAAC,GAAK,EAAG,EACrB,WAAY,GACZ,aAAcA,EAAM,MACtB,EAEJ,EAGMC,EAAc,CAClB,GAAGjE,EACH,aAAc+D,EACd,KAAM/D,EAAW,SACnB,EAGAsC,EAAe2B,CAAW,EAE1BjB,EAAiB,EAAI,EACrBI,EAAgB,EAAI,EACpBN,EAAW,EAAK,QACToB,EAAO,CACdhB,EAAe,6BAA6BgB,EAAM,SAAW,eAAe,EAAE,EAC9EpB,EAAW,EAAK,CAAA,CAEpB,EAEMqB,EAAsB,IAAM,CAChCf,EAAgB,EAAK,CACvB,EAEMgB,EAAiB,IAAM,CAC3BhC,EAAS,cAAc,CACzB,EAEMiC,EAAoB,IAAM,OAC9B,OAAQ5B,EAAY,CAClB,IAAK,GACL,IAAK,GACL,IAAK,GAED,OAAA5B,EAAA,IAACjB,GAAA,CACC,cAAeI,EACf,SAAUqD,EACV,OAAQV,CAAA,CACV,EAGJ,IAAK,GACH,cACG/B,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,KAAK,aAAY,GAAC,SAEtC,wBAAA,SAECwD,EAAM,CAAA,GAAI,CAAE,EAAG,CACd,EAAA,SAAA,CAAAvD,OAACH,EACC,CAAA,SAAA,CAACC,EAAA,IAAAC,EAAA,CAAW,QAAQ,YAAY,SAAiB,oBAAA,QAChDyD,EAAQ,CAAA,GAAI,CAAE,GAAI,GAAK,EACxBxD,EAAAA,KAACH,EAAI,CAAA,GAAI,CAAE,QAAS,OAAQ,oBAAqB,UAAW,IAAK,CAAA,EAC/D,SAAA,CAAAG,OAACH,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAK,QAAA,EACtDD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,SAAU,CAAA,CAAA,EACpD,SACCF,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAK,QAAA,EACtDD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,SAAU,CAAA,CAAA,EACpD,SACCF,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAS,YAAA,EAC1DD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,aAAc,CAAA,CAAA,EACxD,SACCF,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAc,iBAAA,EAC/DD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,UAAW,CAAA,CAAA,EACrD,EAECd,EAAW,aAAe,gBACzBe,EAAAA,KAACH,GAAI,GAAI,CAAE,WAAY,QACrB,EAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAa,gBAAA,EAC/DD,EAAAA,IAACC,EAAW,CAAA,QAAQ,QAAQ,GAAI,CAAE,UAAW,WAC1C,EAAA,SAAAd,EAAW,WACd,CAAA,CAAA,EACF,EAGDA,EAAW,aAAe,eACzBe,EAAAA,KAACH,GAAI,GAAI,CAAE,WAAY,QACrB,EAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAW,cAAA,EAC7DD,EAAAA,IAACC,EAAW,CAAA,QAAQ,QAAQ,GAAI,CAAE,UAAW,WAC1C,EAAA,SAAAd,EAAW,SACd,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,SAECY,EAAI,CAAA,GAAI,CAAE,GAAI,CACb,EAAA,SAAA,CAACC,EAAA,IAAAC,EAAA,CAAW,QAAQ,YAAY,SAAuB,0BAAA,QACtDyD,EAAQ,CAAA,GAAI,CAAE,GAAI,GAAK,EACxBxD,EAAAA,KAACH,EAAI,CAAA,GAAI,CAAE,QAAS,OAAQ,oBAAqB,UAAW,IAAK,CAAA,EAC/D,SAAA,CAAAG,OAACH,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAS,YAAA,EAC1DD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,QAAS,CAAA,CAAA,EACnD,SACCF,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAW,cAAA,EAC5DD,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,SAAU,CAAA,CAAA,EACpD,SACCF,EAAI,CAAA,GAAI,CAAE,WAAY,QACrB,EAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAiB,oBAAA,EACnED,EAAAA,IAACD,EAAI,CAAA,GAAI,CAAE,QAAS,OAAQ,SAAU,OAAQ,IAAK,GAAK,GAAI,IACzD,UAAW4D,EAAAxE,EAAA,kBAAA,YAAAwE,EAAiB,IAAKlE,GAChCO,EAAA,IAACC,GAAuB,QAAQ,QAAQ,UAAU,OAAO,GAAI,CAC3D,QAAS,mBACT,GAAI,EACJ,GAAI,GACJ,aAAc,EACd,SAAU,SAET,EAAA,SAAAR,GAPcA,CAQjB,EAEJ,CAAA,CAAA,EACF,SACCM,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAuB,0BAAA,EACxED,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,aAAc,CAAA,CAAA,EACxD,SACCF,EACC,CAAA,SAAA,CAAAC,MAACC,EAAW,CAAA,QAAQ,QAAQ,MAAM,gBAAgB,SAAoB,uBAAA,EACrED,EAAA,IAAAC,EAAA,CAAW,QAAQ,QAAS,WAAW,UAAW,CAAA,CAAA,CACrD,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAECmC,GACEpC,EAAA,IAAA4D,EAAA,CAAM,SAAS,QAAQ,GAAI,CAAE,GAAI,CAAE,EACjC,SACHxB,CAAA,CAAA,EAGDF,GACElC,EAAA,IAAA4D,EAAA,CAAM,SAAS,UAAU,GAAI,CAAE,GAAI,GAAK,SAEzC,yCAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAGJ,QACS,OAAA,IAAA,CAEb,EAGE,OAAA1D,EAAA,KAAC2D,GAAU,CAAA,SAAS,KAClB,SAAA,CAAA7D,MAACC,EAAW,CAAA,QAAQ,KAAK,aAAY,GAAC,SAEtC,sBAAA,EAEAC,OAACuD,GAAM,GAAI,CAAE,EAAG,EAAG,GAAI,CACrB,EAAA,SAAA,CAACzD,EAAAA,IAAA8D,GAAA,CAAQ,WAAAlC,EAAwB,iBAAgB,GAAC,GAAI,CAAE,GAAI,GACzD,SAAAP,EAAM,IAAK0C,SACTC,GACC,CAAA,SAAAhE,EAAA,IAACiE,IAAW,SAAMF,CAAA,CAAA,CAAA,EADTA,CAEX,CACD,CACH,CAAA,EAEA/D,EAAAA,IAACD,EACE,CAAA,SAAAyD,EACH,CAAA,CAAA,EAEAtD,EAAAA,KAACH,EAAI,CAAA,GAAI,CAAE,QAAS,OAAQ,eAAgB,gBAAiB,GAAI,CAAA,EAC/D,SAAA,CAAAC,EAAA,IAACkE,EAAA,CACC,SAAUtC,IAAe,GAAKI,EAC9B,QAASe,EACV,SAAA,MAAA,CAED,EAEC/C,EAAA,IAAAD,EAAA,CACE,SAAe6B,IAAAP,EAAM,OAAS,EAC7BrB,EAAA,IAACkE,EAAA,CACC,QAAQ,YACR,MAAM,UACN,QAASlB,EACT,SAAUhB,GAAWE,EACrB,UAAWF,EAAWhC,EAAA,IAAAmE,GAAA,CAAiB,KAAM,GAAI,MAAM,SAAU,CAAA,EAAK,KAErE,WAAU,gBAAkB,oBAAA,CAAA,EAG/BnE,EAAA,IAACkE,EAAA,CACC,QAAQ,YACR,MAAM,UACN,QAASrB,EACV,SAAA,MAAA,CAAA,CAIL,CAAA,CAAA,CACF,CAAA,CAAA,EACF,EAECX,GACElC,EAAAA,IAAAD,EAAA,CAAI,GAAI,CAAE,GAAI,EAAG,QAAS,OAAQ,eAAgB,QACjD,EAAA,SAAAC,EAAA,IAACkE,EAAA,CACC,QAAQ,YACR,MAAM,UACN,KAAK,QACL,QAASX,EACV,SAAA,gCAAA,CAAA,EAGH,EAGFvD,EAAA,IAACoE,GAAA,CACC,KAAM9B,EACN,iBAAkB,IAClB,QAASgB,EACT,QAAQ,yCAAA,CAAA,CACV,EACF,CAEJ"}